{"version":3,"sources":["components/app-header/app-header.module.sass","hooks/hooks.ts","components/app-header/app-header.tsx","layouts/with-app-header/with-app-header.tsx","services/types/hooks.ts","components/burger-ingredients-item/burger-ingredients-item.tsx","components/burger-ingredients-list/burger-ingredients-list.tsx","components/loader/loader.tsx","components/burger-ingredients/burger-ingredients.tsx","services/constants/ingredients.ts","components/burger-constructor-item/burger-constructor-item.tsx","services/actions/ingredients/ingredients.ts","components/burger-constructor/burger-constructor.tsx","pages/constructor-page/constructor-page.tsx","services/constants/wsOrders.ts","services/constants/order.ts","services/actions/order/order.ts","services/constants/user.ts","services/actions/user/user.ts","services/constants/modal.ts","components/app/app.tsx","services/actions/wsOrders/wsOrders.ts","services/actions/modal/modal.ts","reportWebVitals.ts","services/reducers/ingredients/ingredients.ts","services/reducers/modal/modal.ts","services/reducers/order/order.ts","services/constants/reset-password.ts","services/reducers/reset-password/reset-password.ts","services/reducers/user/user.ts","services/reducers/wsOrders/wsOrders.ts","services/reducers/index.ts","utils/cookies.js","services/middleware/socketMiddleware.ts","services/constants/index.ts","utils/apiHelper.js","services/sagas/ingredients.ts","services/sagas/user.ts","services/sagas/order.ts","services/actions/reset-password/reset-password.ts","services/sagas/reset-password.ts","services/sagas/index.ts","services/store.ts","index.tsx","components/burger-ingredients-item/burger-ingredients-item.module.sass","components/burger-ingredients/burger-ingredients.module.sass","components/burger-constructor/burger-constructor.module.sass","components/burger-constructor-item/burger-constructor-item.module.sass","components/burger-ingredients-list/burger-ingredients-list.module.sass","components/loader/loader.module.sass","pages/constructor-page/constructor-page.module.sass"],"names":["module","exports","useSelector","selectorHook","useDispatch","dispatchHook","AppHeader","path","useRouteMatch","user","store","className","s","header","header_container","header_left_wrapper","to","exact","header_item","activeClassName","active","type","header_logo","WithAppHeader","children","BurgerIngredientsItem","ingredient","count","onIngredientClick","location","useLocation","name","price","image","_id","useDrag","item","ingredientRef","pathname","state","background","onClick","ref","data-test","ingredient_counter","size","ingredient_img","src","alt","ingredient_price_wrapper","ingredient_name","BurgerIngredientsList","title","ingredients","constructorIngredients","constructorBun","counters","useMemo","counter","map","ingredientsArr","data-scroll-id","type_wrapper","ingredients_type_wrapper","Loader","loader","xmlns","xmlnsXlink","style","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","r","fill","attributeName","repeatCount","dur","calcMode","keyTimes","values","keySplines","begin","BurgerIngredients","handleIngredientClick","useState","currentTab","setCurrentTab","boxRef","useRef","switchCurrentTab","element","document","querySelector","HTMLElement","offset","offsetTop","current","scroll","left","top","behavior","section_container","ingredients_wrapper","tab_wrapper","value","onScroll","e","bunContainer","sauceContainer","mainContainer","target","scrollTop","ingredients_items_wrapper","category","GET_INGREDIENTS_REQUEST","GET_INGREDIENTS_SUCCESS","GET_INGREDIENTS_FAILED","ADD_INGREDIENT_TO_CONSTRUCTOR","DELETE_INGREDIENT_FROM_CONSTRUCTOR","ADD_BUN_TO_CONSTRUCTOR","MOVE_INGREDIENT_IN_CONSTRUCTOR","RESET_CONSTRUCTOR","BurgerConstructorItem","index","dispatch","deleteIngredient","payload","deleteIngredientFromConstructor","useDrop","accept","collect","monitor","isHover","isOver","hover","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","clientOffset","getClientOffset","hoverClientY","y","drop","isDragging","drag","constructor_item","drag_icon","text","thumbnail","handleClose","BurgerConstructor","handleOrderClick","history","useHistory","drag_id","uuidv4","dropContainer","totalPrice","length","reduce","acc","curr","no_ingredients","isLocked","wrapper_inner","constructor_footer","total_wrapper","push","ConstructorPage","DndProvider","backend","HTML5Backend","table_wrapper","WS_ALL_ORDERS_CONNECTION_SUCCESS","WS_ALL_ORDERS_CONNECTION_ERROR","WS_ALL_ORDERS_CONNECTION_CLOSED","WS_ALL_ORDERS_GET_MESSAGE","WS_ALL_ORDERS_CONNECTION_START","WS_USER_ORDERS_CONNECTION_SUCCESS","WS_USER_ORDERS_CONNECTION_ERROR","WS_USER_ORDERS_CONNECTION_CLOSED","WS_USER_ORDERS_GET_MESSAGE","WS_USER_ORDERS_CONNECTION_START","GET_ORDER_REQUEST","GET_ORDER_SUCCESS","GET_ORDER_FAILED","ORDER_RESET","getOrderRequest","getOrderFailed","USER_REGISTER_REQUEST","USER_LOGOUT_REQUEST","USER_LOGIN_REQUEST","UPDATE_USER_INFO_REQUEST","GET_USER_INFO_REQUEST","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAILED","SET_EMAIL","RESET_EMAIL","SET_PASSWORD","RESET_PASSWORD","SET_NAME","RESET_NAME","getUserInfoRequest","getUserInfoSuccess","getUserInfoFailed","setEmail","email","resetEmail","resetPassword","setName","SET_MODAL_INNER_INGREDIENT_DETAILS","SET_MODAL_INNER_ORDER_DETAILS","SET_CURRENT_INGREDIENT","SET_MODAL_INNER_ORDER_INFO","SET_CURRENT_ORDER_INFO","App","ModalSwitch","closeModal","action","modalInner","modal","goBack","useEffect","localStorage","getItem","closeModalByEscape","key","addEventListener","removeEventListener","propLocation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","ingredientsRequest","ingredientsFiled","ingredientsConstructor","currentIngredient","currentOrderInfo","order","orderRequest","orderFiled","SEND_EMAIL_REQUEST","SEND_EMAIL_SUCCESS","SEND_EMAIL_FAILED","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAILED","SET_EMAILCODE","RESET_EMAILCODE","sendEmailSuccess","sendEmailRequest","sendEmailFailed","resetPasswordRequest","resetPasswordSuccess","resetPasswordFailed","emailCode","userReguest","userFailed","password","wsAllOrdersConnect","allOrders","wsUserOrdersConnect","userOrders","wsAllOrdersActions","wsInit","onOpen","onClose","onError","onMessage","wsUserOrdersActions","rootReducer","combineReducers","filter","arr","dragItem","hoverItem","wsOrders","setCookie","props","exp","expires","d","Date","setTime","getTime","toUTCString","updatedCookie","encodeURIComponent","propName","propValue","cookie","getCookie","matches","match","RegExp","replace","decodeURIComponent","undefined","createSocketMiddlware","token","wsActions","socket","next","WebSocket","onopen","event","onerror","onmessage","data","parsedData","JSON","parse","restParsedData","success","onclose","_apiUrl","checkResponse","response","ok","json","Promise","reject","error","getIngredients","ingredientsSaga","getIngredientsFetch","fetch","call","put","takeEvery","userLogin","userLogout","getUserInfo","updateUserInfo","userRegister","userSaga","userLoginFetch","method","headers","body","stringify","userLogoutFetch","getUserInfoFetch","Authorization","updateAccessTokenFetch","catch","console","log","updateUserInfoFetch","userRegisterFetch","select","userActions","accessToken","split","refreshToken","setItem","removeItem","message","makeOrder","orderSaga","makeOrderFetch","ingredientsIdArr","finalIngredients","finalIngredientsArg","sendEmail","resetUserPassword","resetPasswordSaga","sendEmailFetch","resetUserPasswordFetch","newPassword","rootSaga","sagas","all","saga","spawn","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","thunk","createStore","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,OAAS,2BAA2B,iBAAmB,qCAAqC,oBAAsB,wCAAwC,YAAc,gCAAgC,OAAS,6B,8GCMtNC,EAA+CC,IAE/CC,EAAc,kBAAMC,e,gCCiElBC,EAnEG,WAEd,IAAQC,EAASC,cAATD,KAEFE,EAAOP,GAAY,SAAAQ,GAAK,OAAIA,EAAMD,KAAKA,QAE7C,OACI,iCACI,qBAAKE,UAAS,UAAKC,IAAEC,OAAP,cAAd,SACI,sBAAKF,UAAWC,IAAEE,iBAAlB,UACI,qBAAIH,UAAWC,IAAEG,oBAAjB,UACI,eAAC,IAAD,CACIC,GAAG,IACHC,OAAK,EACLN,UAAS,UAAKC,IAAEM,YAAP,6BACTC,gBAAiBP,IAAEQ,OAJvB,UAMI,qBAAKT,UAAU,OAAf,SACI,cAAC,aAAD,CAAYU,KAAe,MAATd,EAAe,UAAY,gBAEjD,sBAAMI,UAAU,8BAAhB,mFAEJ,eAAC,IAAD,CACIA,UAAS,UAAKC,IAAEM,YAAP,wBACTF,GAAG,QACHC,OAAK,EACLE,gBAAiBP,IAAEQ,OAJvB,UAMI,qBAAKT,UAAU,OAAf,SACI,cAAC,WAAD,CAAUU,KAAe,UAATd,EAAmB,UAAY,gBAEnD,sBAAMI,UAAU,8BAAhB,uFAGR,cAAC,IAAD,CAAMK,GAAG,IAAIL,UAAWC,IAAEU,YAA1B,SACI,cAAC,OAAD,OAEFb,GACE,eAAC,IAAD,CACIO,GAAG,SACHL,UAAS,UAAKC,IAAEM,YAAP,wBACTC,gBAAiBP,IAAEQ,OAHvB,UAKI,qBAAKT,UAAU,OAAf,SACI,cAAC,cAAD,CAAcU,KAAe,WAATd,EAAoB,UAAY,gBAExD,sBAAMI,UAAU,8BAAhB,+CAGPF,GACG,eAAC,IAAD,CACIO,GAAG,WACHL,UAAS,UAAKC,IAAEM,YAAP,wBACTC,gBAAiBP,IAAEQ,OAHvB,UAKI,qBAAKT,UAAU,OAAf,SACI,cAAC,cAAD,CAAaU,KAAgB,aAATd,GAAgC,oBAATA,EAA8B,UAAY,gBAEzF,sBAAMI,UAAU,8BAAhB,wGCrDbY,EATW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACI,qCACI,cAAC,EAAD,IACCA,M,yBCCEtB,EAA+CC,I,0BCmD/CsB,EA3Ce,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,kBAE1CC,EAAWC,cAETC,EAA4BL,EAA5BK,KAAMC,EAAsBN,EAAtBM,MAAOC,EAAeP,EAAfO,MAAOC,EAAQR,EAARQ,IAE5B,EAA0BC,YAAQ,CAC9Bd,KAAM,cACNe,KAAMV,IAFDW,EAAT,oBASA,OACI,eAAC,IAAD,CACIrB,GAAI,CACAsB,SAAS,gBAAD,OAAkBJ,GAC1BK,MAAO,CAAEC,WAAYX,IAEzBY,QAAS,kBAAMb,EAAkBF,IACjCf,UAAS,UAAKC,IAAEc,YAChBgB,IAAKL,EACLM,YAAU,aARd,UAUI,sBAAKhC,UAAU,iBAAf,UACKgB,GACG,qBAAKhB,UAAWC,IAAEgC,mBAAlB,SACI,cAAC,UAAD,CAASjB,MAAOA,EAAOkB,KAAK,cAGpC,qBAAKlC,UAAS,UAAKC,IAAEkC,eAAP,SAA8BC,IAAKd,EAAOe,IAAKjB,IAC7D,sBAAKpB,UAAS,UAAKC,IAAEqC,yBAAP,SAAd,UACI,sBAAMtC,UAAU,gCAAhB,SAAiDqB,IACjD,cAAC,eAAD,CAAcX,KAAK,kBAG3B,oBAAIV,UAAS,UAAKC,IAAEsC,gBAAP,gCAAb,SAAoEnB,Q,iBCajEoB,EA/Ce,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,MAAO/B,EAA2D,EAA3DA,KAAMO,EAAqD,EAArDA,kBAE1C,EAAgE1B,GAAY,SAAAQ,GAAK,MAAK,CAClF2C,YAAa3C,EAAM2C,YAAYA,YAC/BC,uBAAwB5C,EAAM2C,YAAYC,uBAC1CC,eAAgB7C,EAAM2C,YAAYE,mBAH9BF,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,uBAAwBC,EAA7C,EAA6CA,eAMvCC,EAAWC,mBAAQ,WAC3B,IAAMC,EAAqB,GAY3B,OAVAJ,EAAuBK,KAAI,SAACjC,GACtBgC,EAAQhC,EAAWQ,OACXwB,EAAQhC,EAAWQ,KAAO,GAEvCwB,EAAQhC,EAAWQ,UAGhBqB,IACMG,EAAQH,EAAerB,KAAO,GAEjCwB,IACL,CAACJ,EAAwBC,IAEnBK,EAAc,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAaM,KAAI,SAACjC,GACrC,GAAIA,EAAWL,OAASA,EACpB,OACI,cAAC,EAAD,CAEIK,WAAYA,EACZC,MAAO6B,EAAS9B,EAAWQ,KAC3BN,kBAAmBA,GAHdF,EAAWQ,QAShC,OACI,sBAAK2B,iBAAgBxC,EAAMV,UAAS,UAAKC,IAAEkD,aAAP,UAApC,UACI,oBAAInD,UAAU,kCAAd,SAAiDyC,IACjD,qBAAKzC,UAAWC,IAAEmD,yBAAlB,SACKH,Q,iBC1BFI,EAjCA,WACX,OACI,qBAAKrD,UAAWC,IAAEqD,OAAlB,SACI,sBACIC,MAAM,6BACNC,WAAW,+BACXC,MAAO,CAAC5B,WAAY,OAAQ6B,QAAS,QAASC,eAAgB,QAC9DC,MAAM,OACNC,OAAO,OACPC,QAAQ,cACRC,oBAAoB,WAPxB,UASI,yBAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UAApC,UACI,yBAASC,cAAc,IAAIC,YAAY,aAAaC,IAAI,QAAQC,SAAS,SAASC,SAAS,MAAMC,OAAO,OAAOC,WAAW,cAAcC,MAAM,OAC9I,yBAASP,cAAc,OAAOC,YAAY,aAAaC,IAAI,KAAKC,SAAS,WAAWC,SAAS,oBAAoBC,OAAO,0CAA0CE,MAAM,UACnK,yBAAQX,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UAApC,UACT,yBAASC,cAAc,IAAIC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,eAAeC,WAAW,kDAAkDC,MAAM,OACrM,yBAASP,cAAc,KAAKC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,iBAAiBC,WAAW,kDAAkDC,MAAM,UAC/L,yBAAQX,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UAApC,UACT,yBAASC,cAAc,IAAIC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,eAAeC,WAAW,kDAAkDC,MAAM,WACrM,yBAASP,cAAc,KAAKC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,iBAAiBC,WAAW,kDAAkDC,MAAM,cAC/L,yBAAQX,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UAApC,UACT,yBAASC,cAAc,IAAIC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,eAAeC,WAAW,kDAAkDC,MAAM,UACrM,yBAASP,cAAc,KAAKC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,iBAAiBC,WAAW,kDAAkDC,MAAM,aAC/L,yBAAQX,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UAApC,UACT,yBAASC,cAAc,IAAIC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,eAAeC,WAAW,kDAAkDC,MAAM,WACrM,yBAASP,cAAc,KAAKC,YAAY,aAAaC,IAAI,KAAKC,SAAS,SAASC,SAAS,oBAAoBC,OAAO,iBAAiBC,WAAW,kDAAkDC,MAAM,oB,iBC+EzMC,EA3FW,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,sBAEzB,EAAoCC,mBAAmC,OAAvE,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAASC,iBAAuB,MAC9BxC,EAAgBnD,GAAY,SAAAQ,GAAK,MAAK,CAC1C2C,YAAa3C,EAAM2C,YAAYA,gBAD3BA,YAIFyC,EAAmB,SAACzE,GACtB,IAAM0E,EAAUC,SAASC,cAAT,2BAA2C5E,EAA3C,OAChB,GAAI0E,GAAWA,aAAmBG,YAAa,CAAC,IAAD,EACrCC,EAASJ,EAAQK,UACvB,UAAAR,EAAOS,eAAP,SAAgBC,OAAO,CACnBC,KAAM,EACNC,IAAKL,EAAS,IACdM,SAAU,aA+BtB,OACI,0BAAS9F,UAAS,UAAKC,IAAE8F,kBAAP,UAAlB,UACI,oBAAI/F,UAAS,UAAKC,IAAEwC,MAAP,mCAAb,mGACI,sBAAKzC,UAAWC,IAAE+F,oBAAlB,WACMtD,GAAe,cAAC,EAAD,IAChBA,GACG,qCACI,sBAAK1C,UAAS,UAAKC,IAAEgG,aAArB,UACI,cAAC,MAAD,CACIxF,OAAuB,QAAfsE,EACRjD,QAAS,kBAAMqD,EAAiB,QAChCe,MAAM,6CAHV,4CAKA,cAAC,MAAD,CACIzF,OAAuB,UAAfsE,EACRjD,QAAS,kBAAMqD,EAAiB,UAChCe,MAAM,6CAHV,4CAKA,cAAC,MAAD,CACIzF,OAAuB,SAAfsE,EACRjD,QAAS,kBAAMqD,EAAiB,SAChCe,MAAM,6CAHV,2DAMJ,qBACIC,SAnDK,SAACC,GAC9B,IAAMC,EAAehB,SAASC,cAAT,0BACfgB,EAAiBjB,SAASC,cAAT,4BACjBiB,EAAgBlB,SAASC,cAAT,2BAEjBc,EAAEI,OAAOC,UAAY,IAAOJ,EAAcZ,WAAcW,EAAEI,OAAOC,UAAY,IAAOH,EAAgBb,WAA4B,QAAfV,EAClHC,EAAc,OAGboB,EAAEI,OAAOC,UAAY,IAAOH,EAAgBb,WAAcW,EAAEI,OAAOC,UAAY,IAAOF,EAAed,WAA4B,UAAfV,EACnHC,EAAc,SAGboB,EAAEI,OAAOC,UAAY,IAAOF,EAAed,WAA4B,SAAfV,GACzDC,EAAc,SAsCMjD,IAAKkD,EACLjF,UAAS,UAAKC,IAAEyG,0BAAP,eAHb,SA9BmF,CACvG,CAACjE,MAAO,iCAAS/B,KAAM,OACvB,CAAC+B,MAAO,iCAAS/B,KAAM,SACvB,CAAC+B,MAAO,6CAAW/B,KAAM,SAgCuBsC,KAAI,SAAC2D,GAAD,OACxB,cAAC,EAAD,CAEI1F,kBAAmB4D,EACnBpC,MAAOkE,EAASlE,MAChB/B,KAAMiG,EAASjG,MAHViG,EAASjG,qB,yBC7FzCkG,EAAqD,0BACrDC,EAAqD,0BACrDC,EAAmD,yBACnDC,EAAiE,gCACjEC,EAA2E,qCAC3EC,EAAmD,yBACnDC,EAAmE,iCACnEC,EAAyC,oB,iBCmFvCC,EA1Ee,SAAC,GAAwD,IAAtDrG,EAAqD,EAArDA,WAAYsG,EAAyC,EAAzCA,MAEnCC,EAAW7H,IACXsC,EAAMmD,iBAAuB,MAE7BqC,EAAmB,SAACxG,GACtBuG,ECiDuC,SAACvG,GAAD,MAAkF,CAC7HL,KAAMsG,EACNQ,QAASzG,GDnDI0G,CAAgC1G,KAG7C,EAAiB2G,YAAQ,CACrBC,OAAQ,aACRC,QAAS,SAAAC,GAAO,MAAK,CACjBC,QAASD,EAAQE,WAErBC,MALqB,SAKfvG,EAAyBoG,GAAU,IAAD,EACpC,GAAK9F,EAAI2D,QAAT,CAGA,IAAMuC,EAAYxG,EAAK4F,MACjBa,EAAab,EAEnB,GAAIY,IAAcC,EAAlB,CAIA,IAAMC,EAAiB,UAAGpG,EAAI2D,eAAP,aAAG,EAAa0C,wBACjCC,GAAgBF,EAAkBG,OAASH,EAAkBtC,KAAO,EACpE0C,EAAeV,EAAQW,kBAC7B,GAAID,EAAc,CACd,IAAME,EAAeF,EAAaG,EAAIP,EAAkBtC,IAExD,GAAIoC,EAAYC,GAAcO,EAAeJ,EACzC,OAEJ,GAAIJ,EAAYC,GAAcO,EAAeJ,EACzC,OAEJf,EC0BiG,CAC7G5G,KAAMwG,EACNM,QD5BiD,CAACU,aAAYD,eAClDxG,EAAK4F,MAAQa,QA7BhBS,EAAT,oBAkCA,EAA+BnH,YAAQ,CACnCd,KAAM,aACNe,KAAM,WACF,MAAO,CAAE4F,UAEbO,QAAS,SAACC,GAAD,MAAc,CACnBe,WAAYf,EAAQe,iBAN5B,mBAASA,EAAT,KAASA,WAYT,OAFAC,EAVA,MAUKF,EAAK5G,IAGN,sBACIA,IAAKA,EACL/B,UAAS,UAAKC,IAAE6I,iBAAP,YAA2BF,EAAa3I,IAAEQ,OAAS,GAAnD,cACTuB,YAAU,yBAHd,UAKI,qBAAKhC,UAAWC,IAAE8I,UAAlB,SACI,cAAC,WAAD,CAAUrI,KAAK,gBAEnB,cAAC,qBAAD,CACIsI,KAAMjI,EAAWK,KACjBC,MAAON,EAAWM,MAClB4H,UAAWlI,EAAWO,MACtB4H,YAAa,kBAAM3B,EAAiBxG,U,iBE0CrCoI,EA1GW,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,iBAEnBC,EAAUC,cACVpI,EAAWC,cAEjB,EAAyD5B,GAAY,SAAAQ,GAAK,MAAK,CAC3E4C,uBAAwB5C,EAAM2C,YAAYC,uBAC1CC,eAAgB7C,EAAM2C,YAAYE,eAClC9C,KAAMC,EAAMD,KAAKA,SAHb6C,EAAR,EAAQA,uBAAwBC,EAAhC,EAAgCA,eAAgB9C,EAAhD,EAAgDA,KAM1CwH,EAAW7H,IAajB,EAA0BiI,YAAQ,CAC9BC,OAAQ,cACRgB,KAF8B,SAEzBlH,GD6BsB,IARQV,ECpBb,QAAdU,EAAKf,KAIT4G,GDgB+BvG,EChBK,2BAAIU,GAAL,IAAW8H,QAASC,gBDgBmD,CAClH9I,KAAMqG,EACNS,QAASzG,KCrBGuG,ED2BuE,CACnF5G,KAAMuG,EACNO,QC7ByC/F,OAJhCgI,EAAT,oBAWMC,EAAqB5G,mBAAQ,WAC/B,OAAIF,GAAkBD,EAAuBgH,OAAS,EAC/BhH,EAAuBiH,QAAO,SAACC,EAAaC,GAC3D,OAAOD,EAAMC,EAAKzI,QACnB,GAEgE,GAA7CuB,EAAiBA,EAAevB,MAAQ,GAEvD,IAEZ,CAACsB,EAAwBC,IAE5B,OACI,0BAAS5C,UAAS,UAAKC,IAAE8F,kBAAP,UAAlB,UACQ,sBACI/F,UAAS,YACT+B,IAAK0H,EACLzH,YAAU,cAHd,WAKMY,GAAoD,IAAlCD,EAAuBgH,QACvC,mBAAG3J,UAAS,UAAKC,IAAE8J,eAAP,gCAAZ,wNAEHnH,GACG,qBAAK5C,UAAS,sBAAd,SACI,cAAC,qBAAD,CACQU,KAAK,MACLsJ,UAAU,EACVhB,KAAI,UAAKpG,EAAexB,KAApB,+BACJC,MAAOuB,EAAevB,MACtB4H,UAAWrG,EAAetB,UAIzCqB,EAAuBgH,OAAS,GAC7B,qBAAK3J,UAAS,UAAKC,IAAEgK,cAAP,SAAd,SACKtH,EAAuBK,KAAI,SAACjC,EAAoCsG,GAArC,OACpB,cAAC,EAAD,CACIA,MAAOA,EACPtG,WAAYA,GACPA,EAAWwI,cAKnC3G,GACG,qBAAK5C,UAAS,sBAAd,SACI,cAAC,qBAAD,CACQU,KAAK,SACLsJ,UAAU,EACVhB,KAAI,UAAKpG,EAAexB,KAApB,yBACJC,MAAOuB,EAAevB,MACtB4H,UAAWrG,EAAetB,aAKnD,sBAAKtB,UAAS,UAAKC,IAAEiK,oBAArB,UACK,sBAAKlK,UAAS,UAAKC,IAAEkK,cAAP,UAAd,UACI,sBAAMnK,UAAU,+BAAhB,SAAgD0J,IAChD,cAAC,eAAD,CAAchJ,KAAK,eAEvB,qBAAKoB,QAnFC,WACThC,EAKD8C,GAAkBD,EAAuBgH,OAAS,GAClDP,EAAiBlI,GALjBmI,EAAQe,KAAK,CAAEzI,SAAU,YAiFrB,SACI,cAAC,SAAD,CAAQjB,KAAK,UAAUwB,KAAK,SAA5B,sG,iBCpFLmI,GAdS,SAAC,GAAwE,IAAtExF,EAAqE,EAArEA,sBAAuBuE,EAA8C,EAA9CA,iBAE9C,OACI,mCACI,cAACkB,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACI,0BAASxK,UAAWC,IAAEwK,cAAtB,UACI,cAAC,EAAD,CAAmB5F,sBAAuBA,IAC1C,cAAC,EAAD,CAAmBuE,iBAAkBA,YC1B5CsB,GAAuE,mCACvEC,GAAmE,iCACnEC,GAAqE,kCACrEC,GAAyD,4BACzDC,GAAmE,iCAEnEC,GAAyE,oCACzEC,GAAqE,kCACrEC,GAAuE,mCACvEC,GAA2D,6BAC3DC,GAAqE,kCCVrEC,GAAyC,oBACzCC,GAAyC,oBACzCC,GAAuC,mBACvCC,GAA6B,cCiC7BC,GAAkB,iBAA+B,CAC5D9K,KAAM0K,KAMKK,GAAiB,iBAA8B,CAC1D/K,KAAM4K,KC5CKI,GAAiD,wBAIjDC,GAA6C,sBAI7CC,GAA2C,qBAI3CC,GAAuD,2BAIvDC,GAAiD,wBACjDC,GAAiD,wBACjDC,GAA+C,uBAE/CC,GAAyB,YACzBC,GAA6B,cAE7BC,GAA+B,eAC/BC,GAAmC,iBAEnCC,GAAuB,WACvBC,GAA2B,aC0I3BC,GAAqB,iBAAkC,CAChE7L,KAAMoL,KAEGU,GAAqB,SAAC1M,GAAD,MAAoD,CAClFY,KAAMqL,GACNvE,QAAS1H,IAEA2M,GAAoB,iBAAiC,CAC9D/L,KAAMsL,KAaGU,GAAW,SAACC,GAAD,MAAqC,CACzDjM,KAAMuL,GACNzE,QAASmF,IAEAC,GAAa,iBAA0B,CAChDlM,KAAMwL,KAMGW,GAAgB,iBAA6B,CACtDnM,KAAM0L,KAEGU,GAAU,SAAC1L,GAAD,MAAmC,CACtDV,KAAM2L,GACN7E,QAASpG,IC1MA2L,GAA2E,qCAC3EC,GAAiE,gCAGjEC,GAAmD,yBACnDC,GAA2D,6BAC3DC,GAAmD,yBC2NjDC,GAjLH,WAEV,IAAMC,EAAc,WAClB,IAAM/F,EAAW7H,IACX4J,EAAUC,cACVpI,EAAWC,cAgCXmM,GA7Be,SAAnBjE,EAAQkE,QAAqBrM,EAASU,OAASV,EAASU,MAAMC,WAEzCtC,GAAY,SAAAQ,GAAK,MAAK,CAC3CyN,WAAYzN,EAAM0N,MAAMD,eADlBA,WA2BW,WACjBlG,EJxC+C,CACnD5G,KAAM6K,KIwCFlC,EAAQqE,WA6BV,OA1BAC,qBAAU,WACRrG,ETlCqE,CACvE5G,KAAMkG,ISmCAgH,aAAaC,QAAQ,iBACvBvG,EAASiF,MAGXjF,ECvB8E,CAChF5G,KAAMoK,ODuBH,CAACxD,IAEJqG,qBAAU,WAER,IAAMG,EAAqB,SAAC1H,GACV,WAAVA,EAAE2H,KACFT,KAMR,OAFAjI,SAAS2I,iBAAiB,UAAWF,GAE9B,WACHzI,SAAS4I,oBAAoB,UAAWH,MAG3C,IAGG,mCACE,cAAC,EAAD,UACE,cAAC,GAAD,CACEjJ,sBApDkB,SAACpD,GAC7B6F,EEtByF,CAC3F5G,KAAMuM,GACNzF,QFoBgC/F,IAC9B6F,EEjCwF,CAC1F5G,KAAMqM,MFmFM3D,iBAhDa,SAAC8E,GACxB5G,EElC4E,CAC9E5G,KAAMsM,KFkCJ3D,EAAQe,KAAK,CAAEzI,SAAU,sBAAuBC,MAAO,CAAEC,WAAYqM,KAErE5G,EAASkE,cA6Ib,OACE,cAAC,IAAD,UACE,cAAC6B,EAAD,OG9MSc,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oCCcDQ,GAAiC,CAC1ClM,YAAa,KACbmM,oBAAoB,EACpBC,kBAAkB,EAElBnM,uBAAwB,GACxBC,eAAgB,MCXb,IAAMgM,GAA4B,CACrCG,uBAAwB,KACxBC,kBAAmB,KACnBC,iBAAkB,KAClBzB,WAAY,MCLT,IAAMoB,GAA4B,CACrCM,MAAO,KACPC,cAAc,EACdC,YAAY,GCnBT,IAAMC,GAA2C,qBAC3CC,GAA2C,qBAC3CC,GAAyC,oBAEzCC,GAAmD,yBACnDC,GAAmD,yBACnDC,GAAiD,wBAEjDC,GAAiC,gBACjCC,GAAqC,kBCgBrChB,GAAoC,CAC7CiB,iBAAkB,KAClBC,kBAAkB,EAClBC,iBAAiB,EAEjBC,sBAAsB,EACtBC,qBAAsB,KACtBC,qBAAqB,EAErBC,UAAW,ICVR,IAAMvB,GAA4B,CACrCwB,aAAa,EACbC,YAAY,EACZvQ,KAAM,KAENsB,KAAM,GACNuL,MAAO,GACP2D,SAAU,ICVP,IAAM1B,GAA+B,CACxC2B,oBAAoB,EACpBC,UAAW,KACXC,qBAAqB,EACrBC,WAAY,MCUT,IAAMC,GAAqB,CAC9BC,OAAQ9F,GACR+F,OAAQnG,GACRoG,QAASlG,GACTmG,QAASpG,GACTqG,UAAWnG,IAIFoG,GAAsB,CAC/BL,OAAQzF,GACR0F,OAAQ9F,GACR+F,QAAS7F,GACT8F,QAAS/F,GACTgG,UAAW9F,IAGFgG,GAAcC,aAAgB,CACvC1D,MN7BW,WAAiF,IAA3D7L,EAA0D,uDAAlDgN,GAAcrB,EAAoC,uCAC3F,OAAOA,EAAO7M,MACV,KAAKuM,GACD,OAAO,2BACArL,GADP,IAEIoN,kBAAmBzB,EAAO/F,UAElC,KAAK2F,GACD,OAAO,2BACAvL,GADP,IAEIqN,iBAAkB1B,EAAO/F,UAEjC,KAAKuF,GACD,OAAO,2BACAnL,GADP,IAEI4L,WAAY,CACR/K,MAAO,0GACP/B,KAAM,uBAGlB,KAAKsM,GACD,OAAO,2BACApL,GADP,IAEI4L,WAAY,CACR/K,MAAO,KACP/B,KAAM,kBAGlB,KAAKwM,GACD,OAAO,2BACAtL,GADP,IAEI4L,WAAY,CACR/K,MAAO8K,EAAO/F,QACd9G,KAAM,eAGlB,QACI,OAAOkB,IMPfsN,ML/BW,WAAiF,IAA3DtN,EAA0D,uDAAlDgN,GAAcrB,EAAoC,uCAC3F,OAAOA,EAAO7M,MACV,KAAK0K,GACD,OAAO,2BACAxJ,GADP,IAEIuN,cAAc,IAEtB,KAAK9D,GACD,OAAO,2BACAzJ,GADP,IAEIuN,cAAc,EACdD,MAAO3B,EAAO/F,UAEtB,KAAK8D,GACD,OAAO,2BACA1J,GADP,IAEIuN,cAAc,EACdC,YAAY,IAEpB,KAAK7D,GACD,OAAO,2BACA3J,GADP,IAEIsN,MAAO,OAEf,QACI,OAAOtN,IKOfc,YPxBW,WAAkG,IAAtEd,EAAqE,uDAA7DgN,GAAcrB,EAA+C,uCAC5G,OAAOA,EAAO7M,MACV,KAAKkG,EACD,OAAO,2BACAhF,GADP,IAEIiN,oBAAoB,IAE5B,KAAK/H,EACD,OAAO,2BACAlF,GADP,IAEIkN,kBAAkB,EAClBD,oBAAoB,IAE5B,KAAKhI,EACD,OAAO,2BACAjF,GADP,IAEIc,YAAa6K,EAAO/F,QACpBsH,kBAAkB,EAClBD,oBAAoB,IAE5B,KAAK9H,EACD,OAAO,2BACAnF,GADP,IAEIe,uBAAuB,GAAD,oBAAMf,EAAMe,wBAAZ,CAAoC4K,EAAO/F,YAEzE,KAAKR,EACD,OAAO,2BACApF,GADP,IAEIe,uBAAwBf,EAAMe,uBAAuByO,QAAO,SAAA3P,GAAI,OAAIA,EAAK8H,UAAYgE,EAAO/F,QAAQ+B,aAE5G,KAAKtC,EACD,OAAO,2BACArF,GADP,IAEIgB,eAAgB2K,EAAO/F,UAE/B,KAAKN,EACD,IAAMmK,EAAG,aAAOzP,EAAMe,wBACzB2O,EAAWD,EAAI9D,EAAO/F,QAAQS,WAC9BsJ,EAAYF,EAAI9D,EAAO/F,QAAQU,YAI5B,OAHTmJ,EAAI9D,EAAO/F,QAAQU,YAAcoJ,EACjCD,EAAI9D,EAAO/F,QAAQS,WAAasJ,EAEhB,2BACA3P,GADP,IAEIe,uBAAwB0O,IAEhC,KAAKlK,EACD,OAAO,2BACAvF,GADP,IAEIe,uBAAwB,GACxBC,eAAgB,OAExB,QACI,OAAOhB,IO5BfiL,cHnBW,WAA0G,IAA5EjL,EAA2E,uDAAnEgN,GAAcrB,EAAqD,uCACpH,OAAOA,EAAO7M,MACV,KAAK2O,GACD,OAAO,2BACAzN,GADP,IAEIkO,kBAAkB,IAE1B,KAAKR,GACD,OAAO,2BACA1N,GADP,IAEIiO,iBAAkBtC,EAAO/F,QACzBsI,kBAAkB,EAClBC,iBAAiB,IAEzB,KAAKR,GACD,OAAO,2BACA3N,GADP,IAEImO,iBAAiB,EACjBD,kBAAkB,IAE1B,KAAKN,GACD,OAAO,2BACA5N,GADP,IAEIoO,sBAAsB,IAE9B,KAAKP,GACD,OAAO,2BACA7N,GADP,IAEIoO,sBAAsB,EACtBE,qBAAqB,EACrBD,qBAAsB1C,EAAO/F,UAErC,KAAKkI,GACD,OAAO,2BACA9N,GADP,IAEIoO,sBAAsB,EACtBE,qBAAqB,IAE7B,KAAKP,GACD,OAAO,2BACA/N,GADP,IAEIuO,UAAW5C,EAAO/F,UAE1B,KAAKoI,GACD,OAAO,2BACAhO,GADP,IAEIuO,UAAW,KAEnB,QACI,OAAOvO,IG7Bf9B,KFvBW,WAA8E,IAAzD8B,EAAwD,uDAAhDgN,GAAcrB,EAAkC,uCACxF,OAAOA,EAAO7M,MACV,KAAKoL,GACD,OAAO,2BACAlK,GADP,IAEIwO,aAAa,IAErB,KAAKrE,GACD,OAAO,2BACAnK,GADP,IAEIwO,aAAa,EACbC,YAAY,EACZvQ,KAAMyN,EAAO/F,UAErB,KAAKwE,GACD,OAAO,2BACApK,GADP,IAEIwO,aAAa,EACbC,YAAY,EACZvQ,KAAM,OAEd,KAAKmM,GACD,OAAO,2BACArK,GADP,IAEI+K,MAAOY,EAAO/F,UAEtB,KAAK0E,GACD,OAAO,2BACAtK,GADP,IAEI+K,MAAO,KAEf,KAAKR,GACD,OAAO,2BACAvK,GADP,IAEI0O,SAAU/C,EAAO/F,UAEzB,KAAK4E,GACD,OAAO,2BACAxK,GADP,IAEI0O,SAAU,KAElB,KAAKjE,GACD,OAAO,2BACAzK,GADP,IAEIR,KAAMmM,EAAO/F,UAErB,KAAK8E,GACD,OAAO,2BACA1K,GADP,IAEIR,KAAM,KAEd,QACI,OAAOQ,IE5Bf4P,SD9BW,WAAoF,IAAjE5P,EAAgE,uDAAxDgN,GAAcrB,EAA0C,uCAC9F,OAAQA,EAAO7M,MACX,KAAKoK,GAKL,KAAKK,GAKL,KAAKT,GACD,OAAO,2BACA9I,GADP,IAEI2O,oBAAoB,IAE5B,KAAK5F,GAKL,KAAKC,GACD,OAAO,2BACAhJ,GADP,IAEI2O,oBAAoB,IAE5B,KAAK1F,GACD,OAAO,2BACAjJ,GADP,IAEI4O,UAAWjD,EAAO/F,UAE1B,KAAKuD,GACD,OAAO,2BACAnJ,GADP,IAEI6O,qBAAqB,IAE7B,KAAKzF,GAKL,KAAKC,GACD,OAAO,2BACArJ,GADP,IAEI6O,qBAAqB,IAE7B,KAAKvF,GACD,OAAO,2BACAtJ,GADP,IAEI8O,WAAYnD,EAAO/F,UAE3B,QACI,OAAO5F,M,SElFZ,SAAS6P,GAAUrQ,EAAM8E,EAAOwL,GAEnC,IAAIC,GADJD,EAAQA,GAAS,IACDE,QAChB,GAAkB,iBAAPD,GAAmBA,EAAK,CAC/B,IAAME,EAAI,IAAIC,KACdD,EAAEE,QAAQF,EAAEG,UAAkB,IAANL,GACxBA,EAAMD,EAAME,QAAUC,EAEtBF,GAAOA,EAAIM,cACXP,EAAME,QAAUD,EAAIM,eAGxB,IAAIC,EAAgB9Q,EAAO,KAD3B8E,EAAQiM,mBAAmBjM,IAE3B,IAAK,IAAMkM,KAAYV,EAAO,CAC1BQ,GAAiB,KAAOE,EACxB,IAAMC,EAAYX,EAAMU,IACN,IAAdC,IACAH,GAAiB,IAAMG,GAG/BhN,SAASiN,OAAT,UAAqBJ,EAArB,aAGG,SAASK,GAAUnR,GACtB,IAAMoR,EAAUnN,SAASiN,OAAOG,MAC5B,IAAIC,OAAO,WAAatR,EAAKuR,QAAQ,+BAAgC,QAAU,aAEnF,OAAOH,EAAUI,mBAAmBJ,EAAQ,SAAMK,E,mBCfzCC,GAAwB,SAACC,EAAsBC,GAyCxD,OAxCoD,SAACjT,GACjD,IAAIkT,EAA2B,KAE/B,OAAO,SAAAC,GAAI,OAAI,SAAA3F,GACX,IAAQjG,EAAavH,EAAbuH,SACA5G,EAAS6M,EAAT7M,KACAkQ,EAAgDoC,EAAhDpC,OAAQC,EAAwCmC,EAAxCnC,OAAQC,EAAgCkC,EAAhClC,QAASC,EAAuBiC,EAAvBjC,QAASC,EAAcgC,EAAdhC,UAEtCtQ,IAASkQ,IAELqC,EADAF,EACS,IAAII,UAAJ,uDAA8DZ,GAAU,iBAExE,IAAIY,UAAU,+CAG3BF,IACAA,EAAOG,OAAS,SAAAC,GACZ/L,EAAS,CAAE5G,KAAMmQ,EAAQrJ,QAAS6L,KAGtCJ,EAAOK,QAAU,SAAAD,GACb/L,EAAS,CAAE5G,KAAMqQ,EAASvJ,QAAS6L,KAGvCJ,EAAOM,UAAY,SAAAF,GACf,IAAQG,EAASH,EAATG,KACFC,EAAaC,KAAKC,MAAMH,GACVI,GAAmBH,EAA/BI,QAAR,aAAuCJ,EAAvC,KAEAnM,EAAS,CAAE5G,KAAMsQ,EAAWxJ,QAASoM,KAGzCX,EAAOa,QAAU,SAAAT,GACb/L,EAAS,CAAE5G,KAAMoQ,EAAStJ,QAAS6L,MAG/CH,EAAK3F,O,2BCjDAwG,GAAmD,wCCAnDC,GAAgB,SAACC,GAC1B,OAAOA,EAASC,GACVD,EAASE,OAAO7F,MAAK,SAAA2F,GACf,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUJ,SACHI,EAEAG,QAAQC,OAAOJ,MAGhCA,EAASE,OAAO7F,MAAK,SAACgG,GAAD,OAAWF,QAAQC,OAAOC,O,aCGxCC,I,aASQC,IAbnBC,GAAsB,WACxB,OAAOC,MAAM,GAAD,OAAIX,GAAJ,iBAA2BzF,KAAK0F,KAGzC,SAAUO,KAAV,wEAEkB,OAFlB,kBAEwBI,aAAKF,IAF7B,OAGC,OADMR,EAFP,gBAGOW,czB6CwBlS,EyB7CEuR,EAAST,KzB6CiE,CAC9G9S,KAAMmG,EACNW,QAAS9E,KyBlDN,8BAKC,OALD,mCAKOkS,azB+C2D,CACrElU,KAAMoG,IyBrDH,kCzBgD8B,IAACpE,IyBhD/B,iBASQ,SAAU8R,KAAV,kEACX,OADW,SACLK,aAAUjO,EAAyB2N,IAD9B,wC,iBCoEEO,I,aA0BAC,I,aAYAC,I,aA4BAC,I,aAkCAC,I,aAyBQC,IA7MlB,SAASC,GAAezI,EAAe2D,GAC1C,OAAOoE,MAAM,GAAD,OAAIX,GAAJ,eAA0B,CAClCsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACjB,MAAS7I,EACT,SAAY2D,MAEjBhC,KAAK0F,IAGL,SAASyB,KACZ,OAAOf,MAAM,GAAD,OAAIX,GAAJ,gBAA2B,CACnCsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACjB,MAAS5H,aAAaC,QAAQ,oBAEnCS,KAAK0F,IAGL,SAAS0B,KACZ,OAAOhB,MAAM,GAAD,OAAIX,GAAJ,cAAyB,CACjCsB,OAAQ,MACRC,QAAS,CACL,eAAgB,iCACfK,cAAe,UAAYpD,GAAU,kBAE3CjE,KAAK0F,IAGL,SAAS4B,KACZ,OAAOlB,MAAM,GAAD,OAAIX,GAAJ,eAA0B,CAClCsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACjBzC,MAAOnF,aAAaC,QAAQ,oBAEjCS,MAAK,SAAC2F,GACL,OAAOA,EAASE,UACjB0B,OAAM,SAAAvB,GACLwB,QAAQC,IAAIzB,MAIb,SAAS0B,GAAoBrJ,EAAevL,EAAckP,GAC7D,OAAOoE,MAAM,GAAD,OAAIX,GAAJ,cAAyB,CACjCsB,OAAQ,QACRC,QAAS,CACL,eAAgB,iCAChBK,cAAe,UAAYpD,GAAU,gBAEzCgD,KAAM7B,KAAK8B,UAAU,CACjB7I,QACAvL,OACAkP,eAELhC,KAAK0F,IAGL,SAASiC,GAAkB7U,EAAcuL,EAAe2D,GAC3D,OAAOoE,MAAM,GAAD,OAAIX,GAAJ,kBAA6B,CACrCsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACjBpU,OACAuL,QACA2D,eAELhC,KAAK0F,IAGL,SAAUc,KAAV,kFAE6B,OAF7B,kBAEmCoB,cAAO,SAACnW,GAAD,MAAY,CACjD4M,MAAO5M,EAAMD,KAAK6M,MAClB2D,SAAUvQ,EAAMD,KAAKwQ,aAJ1B,OAOkB,OAPlB,SAES3D,EAFT,EAESA,MAAO2D,EAFhB,EAEgBA,SAFhB,SAOwBqE,aAAKS,GAAgBzI,EAAO2D,GAPpD,OASC,OAFM2D,EAPP,iBASOW,aAAIuB,GAA+BlC,EAASnU,OATnD,QAUC,OAVD,UAUO8U,aAAIuB,MAVX,QAWC,OAXD,UAWOvB,aAAIuB,MAXX,QAaC,OAbD,UAaOvB,aAAIuB,GAAoBlC,EAASnU,KAAKsB,OAb7C,QAcC,OAdD,UAcOwT,aAAIuB,GAAqBlC,EAASnU,KAAK6M,QAd9C,QAgBOyJ,EAAcnC,EAASmC,YAAYC,MAAM,WAAW,GACpDC,EAAerC,EAASqC,aAE9B7E,GAAU,cAAe2E,GACzBxI,aAAa2I,QAAQ,eAAgBD,GApBtC,wBAsBC,OAtBD,oCAsBO1B,anB8BgD,CAC1DlU,KDpIkD,sBoB+E/C,uDA0BA,SAAUqU,KAAV,kEAEkB,OAFlB,kBAEwBJ,aAAKc,IAF7B,OAMC,OAND,OAIC7H,aAAa4I,WAAW,gBLxF5B/E,GKyFiB,cLzFD,KAAM,CAAEG,SAAU,IKoF/B,SAMOgD,aAAIuB,GAA+B,OAN1C,+BAQC,OARD,oCAQOvB,anBsCkD,CAC5DlU,KD5JoD,uBoB6GjD,uDAYA,SAAUsU,KAAV,8EAEkB,OAFlB,kBAEwBL,aAAKe,IAF7B,OAIC,OAFMzB,EAFP,gBAIOW,aAAIuB,GAA+BlC,EAASnU,OAJnD,OAKC,OALD,SAKO8U,aAAIuB,GAAoBlC,EAASnU,KAAKsB,OAL7C,OAMC,OAND,UAMOwT,aAAIuB,GAAqBlC,EAASnU,KAAK6M,QAN9C,6DAQwB,iBAAnB,uCAAO8J,SARZ,iBASkB,OATlB,UASwB9B,aAAKiB,IAT7B,qBASWpC,EATX,kBAWSA,OAXT,EAWSA,EAAMK,SAXf,iBAkBS,OANMuC,EAAc5C,EAAK4C,YAAYC,MAAM,WAAW,GAChDC,EAAe9C,EAAK8C,aAE1B7E,GAAU,cAAe2E,GACzBxI,aAAa2I,QAAQ,eAAgBD,GAhB9C,UAkBe1B,aAAIuB,MAlBnB,gCAoBS,OApBT,UAoBevB,aAAIuB,MApBnB,0CAwBC,OAxBD,UAwBOvB,aAAIuB,MAxBX,uDA4BA,SAAUlB,KAAV,sFAEmC,OAFnC,kBAEyCiB,cAAO,SAAAnW,GAAK,MAAK,CACrD4M,MAAO5M,EAAMD,KAAK6M,MAClBvL,KAAMrB,EAAMD,KAAKsB,KACjBkP,SAAUvQ,EAAMD,KAAKwQ,aAL1B,OAQkB,OARlB,SAES3D,EAFT,EAESA,MAAOvL,EAFhB,EAEgBA,KAAMkP,EAFtB,EAEsBA,SAFtB,SAQwBqE,aAAKqB,GAAqBrJ,EAAOvL,EAAMkP,GAR/D,OAUC,OAFM2D,EARP,iBAUOW,aAAIuB,GAA+BlC,EAASnU,OAVnD,QAWC,OAXD,UAWO8U,aAAIuB,GAAoBlC,EAASnU,KAAKsB,OAX7C,QAYC,OAZD,UAYOwT,aAAIuB,GAAqBlC,EAASnU,KAAK6M,QAZ9C,6DAcwB,iBAAnB,uCAAO8J,SAdZ,iBAekB,OAflB,UAewB9B,aAAKiB,IAf7B,qBAeWpC,EAfX,kBAiBSA,OAjBT,EAiBSA,EAAMK,SAjBf,iBAwBS,OANMuC,EAAc5C,EAAK4C,YAAYC,MAAM,WAAW,GAChDC,EAAe9C,EAAK8C,aAE1B7E,GAAU,cAAe2E,GACzBxI,aAAa2I,QAAQ,eAAgBD,GAtB9C,UAwBe1B,anBlCoD,CACtElU,KAAMmL,KmBSH,gCA0BS,OA1BT,UA0Be+I,anB9BkD,CACpElU,KD1I8D,4BoB6I3D,0CA8BC,OA9BD,UA8BOkU,anBlC0D,CACpElU,KD1I8D,4BoB6I3D,uDAkCA,SAAUwU,KAAV,oFAEmC,OAFnC,kBAEyCgB,cAAO,SAAAnW,GAAK,MAAK,CACrD4M,MAAO5M,EAAMD,KAAK6M,MAClBvL,KAAMrB,EAAMD,KAAKsB,KACjBkP,SAAUvQ,EAAMD,KAAKwQ,aAL1B,OAQkB,OARlB,SAES3D,EAFT,EAESA,MAAOvL,EAFhB,EAEgBA,KAAMkP,EAFtB,EAEsBA,SAFtB,SAQwBqE,aAAKsB,GAAmBtJ,EAAOvL,EAAMkP,GAR7D,OAUC,OAFM2D,EARP,iBAUOW,aAAIuB,GAA+BlC,EAASnU,OAVnD,QAWC,OAXD,UAWO8U,aAAIuB,MAXX,QAYC,OAZD,UAYOvB,aAAIuB,MAZX,QAaC,OAbD,UAaOvB,anBEoC,CAC9ClU,KAAM4L,KmBhBH,QAeO8J,EAAcnC,EAASmC,YAAYC,MAAM,WAAW,GACpDC,EAAerC,EAASqC,aAE9B7E,GAAU,cAAe2E,GACzBxI,aAAa2I,QAAQ,eAAgBD,GAnBtC,wBAqBC,OArBD,oCAqBO1B,anB5BsD,CAChElU,KDrLwD,yBoB2LrD,uDAyBQ,SAAUyU,KAAV,kEACX,OADW,SACLN,aAAUjJ,GAAoBkJ,IADzB,OAEX,OAFW,SAELD,aAAUlJ,GAAqBoJ,IAF1B,OAGX,OAHW,SAGLF,aAAU/I,GAAuBkJ,IAH5B,OAIX,OAJW,SAILH,aAAUhJ,GAA0BoJ,IAJ/B,OAKX,OALW,UAKLJ,aAAUnJ,GAAuBwJ,IAL5B,yC,iBC7LEwB,I,aAkCQC,IA/ClB,SAASC,GAAeC,GAC3B,OAAOnC,MAAM,GAAD,OAAIX,GAAJ,WAAsB,CAC9BsB,OAAQ,OACRC,QAAS,CACP,eAAgB,iCAChB,cAAiB,UAAY/C,GAAU,gBAEzCgD,KAAM7B,KAAK8B,UAAU,CACnB,YAAeqB,MAElBvI,KAAK0F,IAGL,SAAU0C,KAAV,wFAEoD,OAFpD,kBAE0DR,cAAO,SAAAnW,GAAK,MAAK,CACtE4C,uBAAwB5C,EAAM2C,YAAYC,uBAC1CC,eAAgB7C,EAAM2C,YAAYE,mBAJvC,OASkB,OATlB,SAESD,EAFT,EAESA,uBAAwBC,EAFjC,EAEiCA,eAI1BkU,EAAmBnU,EAAuBK,KAAI,SAACjC,GAAD,OAAqCA,EAAWQ,OAC9FwV,EAPP,uBAOiCD,GAPjC,CAOmDlU,EAAerB,IAAKqB,EAAerB,MAPtF,UASwBoT,aAAKiC,GAAgBG,GAT7C,QAWC,OAFM9C,EATP,iBAWOW,ctBGkB1F,EsBHE+E,EAAS/E,MtBGgC,CACzExO,KAAM2K,GACN7D,QAAS0H,KsBhBJ,QAYC,OAZD,UAYO0F,a3B8CmD,CAC7DlU,KAAMyG,I2B3DH,6DAewB,iBAAnB,uCAAOsP,SAfZ,iBAgBkB,OAhBlB,UAgBwB9B,aAAKiB,IAhB7B,qBAgBWpC,EAhBX,kBAiBSA,OAjBT,EAiBSA,EAAMK,SAjBf,iBAwBS,OANMuC,EAAc5C,EAAK4C,YAAYC,MAAM,WAAW,GAChDC,EAAe9C,EAAK8C,aAE1B7E,GAAU,cAAe2E,GACzBxI,aAAa2I,QAAQ,eAAgBD,GAtB9C,UAwBe1B,aAAIpJ,MAxBnB,gCA0BS,OA1BT,UA0BeoJ,aAAInJ,MA1BnB,0CA8BC,OA9BD,UA8BOmJ,aAAInJ,MA9BX,kCtBcwB,IAACyD,IsBdzB,kBAkCQ,SAAUyH,KAAV,kEACX,OADW,SACL9B,aAAUzJ,GAAmBsL,IADxB,wCC3Cf,IA4Ca7G,GAAmB,SAAClD,GAAD,MAAyD,CACrFjM,KAAM4O,GACN9H,QAASmF,IAQAsD,GAAuB,SAACK,GAAD,MAAmE,CACnG5P,KAAM+O,GACNjI,QAAS8I,I,aCrCI0G,I,aAYAC,I,aAiBQC,IAtDnBC,GAAiB,SAACxK,GACpB,OAAO+H,MAAM,GAAD,OAAIX,GAAJ,mBAA8B,CACtCsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACnB7I,YAEH2B,KAAK0F,KAGNoD,GAAyB,SAACC,EAAqBlH,GACjD,OAAOuE,MAAM,GAAD,OAAIX,GAAJ,yBAAoC,CAC5CsB,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAM7B,KAAK8B,UAAU,CACjBlF,SAAU+G,EACVtE,MAAO5C,MAEZ7B,KAAK0F,KAGL,SAAUgD,KAAV,0EAEe,OAFf,kBAEqBd,cAAO,SAAAnW,GAAK,OAAIA,EAAMD,KAAK6M,SAFhD,OAGkB,OADXA,EAFP,gBAGwBgI,aAAKwC,GAAgBxK,GAH7C,OAKC,OAFMsH,EAHP,gBAKOW,aAAI/E,GAAiBoE,IAL5B,OAMC,OAND,UAMOW,aAAIhI,MANX,gCAQC,OARD,oCAQOgI,aDqBgD,CAC1DlU,KAAM6O,KC9BH,uDAYA,SAAU0H,KAAV,8EAEiC,OAFjC,kBAEuCf,cAAO,SAAAnW,GAAK,MAAK,CACnDuQ,SAAUvQ,EAAMD,KAAKwQ,SACrBH,UAAWpQ,EAAM8M,cAAcsD,cAJpC,OAOkB,OAPlB,SAESA,EAFT,EAESA,UAAWG,EAFpB,EAEoBA,SAFpB,SAOwBqE,aAAKyC,GAAwB9G,EAAUH,GAP/D,OASC,OAFM8D,EAPP,iBASOW,aAAI3E,GAAqBgE,IAThC,QAUC,OAVD,UAUOW,aDwB8C,CACxDlU,KAAMkP,KCnCH,QAWC,OAXD,UAWOgF,aAAI/H,MAXX,gCAaC,OAbD,oCAaO+H,aDcwD,CAClElU,KAAMgP,KC5BH,uDAiBQ,SAAUwH,KAAV,kEACX,OADW,SACLrC,aAAUrF,GAAwByH,IAD7B,OAEX,OAFW,SAELpC,aAAUxF,GAAoB2H,IAFzB,wC,iBC1DEM,IAAV,SAAUA,KAAV,wEAGH,OAFMC,EAAQ,CAAC/C,GAAiBW,GAAU+B,GAAmBP,IAD1D,SAGGa,aAAID,EAAMvU,KAAI,SAAAyU,GAAI,OAAIC,aAAMD,OAH/B,wCCUP,IAAME,GAAmBC,OAAOC,sCAAwCC,KAElEC,GAAiBC,eAEVC,GAAWN,GAAiBO,aACrCC,KACAJ,GACAjF,GAAsB,KAAMnC,IAC5BmC,GAAsB,QAAS7B,MAGtBlR,GAAQqY,aAAYlH,GAAa+G,IAE9CF,GAAeM,IAAIf,ICpBnBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzY,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJsF,SAASoT,eAAe,SAM1BtK,M,mBCpBA9O,EAAOC,QAAU,CAAC,WAAa,4CAA4C,mBAAqB,oDAAoD,eAAiB,gDAAgD,yBAA2B,0DAA0D,gBAAkB,mD,mBCA5TD,EAAOC,QAAU,CAAC,kBAAoB,8CAA8C,YAAc,wCAAwC,oBAAsB,gDAAgD,0BAA4B,wD,mBCA5OD,EAAOC,QAAU,CAAC,kBAAoB,8CAA8C,KAAO,iCAAiC,cAAgB,0CAA0C,mBAAqB,+CAA+C,cAAgB,0CAA0C,eAAiB,6C,mBCArUD,EAAOC,QAAU,CAAC,iBAAmB,kDAAkD,OAAS,0C,mBCAhGD,EAAOC,QAAU,CAAC,yBAA2B,4D,mBCA7CD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,cAAgB,2C","file":"static/js/main.ce262cef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"app-header_header__c8dt3\",\"header_container\":\"app-header_header_container__rufEh\",\"header_left_wrapper\":\"app-header_header_left_wrapper__2dGPo\",\"header_item\":\"app-header_header_item__2F-FA\",\"active\":\"app-header_active__WNEL9\"};","import {\r\n    TypedUseSelectorHook,\r\n    useDispatch as dispatchHook,\r\n    useSelector as selectorHook\r\n} from 'react-redux';\r\nimport { AppDispatch, AppThunk, RootState } from '../services/types';\r\n  \r\nexport const useSelector: TypedUseSelectorHook<RootState> = selectorHook;\r\n  \r\nexport const useDispatch = () => dispatchHook<AppDispatch | AppThunk>(); ","\r\nimport { Logo, ListIcon, BurgerIcon, ProfileIcon  } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { NavLink, useRouteMatch, Link } from 'react-router-dom';\r\nimport { useSelector } from \"../../hooks/hooks\";\r\n\r\nimport s from './app-header.module.sass';\r\n\r\nconst AppHeader = () => {\r\n\r\n    const { path } = useRouteMatch();\r\n\r\n    const user = useSelector(store => store.user.user)\r\n\r\n    return (\r\n        <header>\r\n            <nav className={`${s.header} pt-4 pb-4`}>\r\n                <div className={s.header_container}>\r\n                    <ul className={s.header_left_wrapper}>\r\n                        <NavLink \r\n                            to=\"/\"\r\n                            exact \r\n                            className={`${s.header_item} pl-5 pr-5 pt-4 pb-4 mr-2`}\r\n                            activeClassName={s.active}\r\n                        >\r\n                            <div className=\"mr-2\">\r\n                                <BurgerIcon type={path === '/' ? 'primary' : 'secondary'}/>\r\n                            </div>\r\n                            <span className=\"text text_type_main-default\">Конструктор</span>\r\n                        </NavLink>\r\n                        <NavLink \r\n                            className={`${s.header_item} pl-5 pr-5 pt-4 pb-4`}\r\n                            to=\"/feed\"\r\n                            exact\r\n                            activeClassName={s.active}\r\n                        >\r\n                            <div className=\"mr-2\">\r\n                                <ListIcon type={path === '/feed' ? 'primary' : 'secondary'}/>\r\n                            </div>\r\n                            <span className=\"text text_type_main-default\">Лента заказа</span>\r\n                        </NavLink>\r\n                    </ul>\r\n                    <Link to=\"/\" className={s.header_logo}>\r\n                        <Logo/>\r\n                    </Link>\r\n                    {!user && (\r\n                        <NavLink \r\n                            to=\"/login\" \r\n                            className={`${s.header_item} pl-5 pr-5 pt-4 pb-4`}\r\n                            activeClassName={s.active}\r\n                        >\r\n                            <div className=\"mr-2\">\r\n                                <ProfileIcon  type={path === '/login' ? 'primary' : 'secondary'}/>\r\n                            </div>\r\n                            <span className=\"text text_type_main-default\">Войти</span>\r\n                        </NavLink>\r\n                    )}\r\n                    {user && (\r\n                        <NavLink \r\n                            to=\"/profile\" \r\n                            className={`${s.header_item} pl-5 pr-5 pt-4 pb-4`}\r\n                            activeClassName={s.active}\r\n                        >\r\n                            <div className=\"mr-2\">\r\n                                <ProfileIcon type={(path === '/profile' || path === '/profile/orders') ? 'primary' : 'secondary'}/>\r\n                            </div>\r\n                            <span className=\"text text_type_main-default\">Личный кабинет</span>\r\n                        </NavLink>\r\n                    )}\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default AppHeader;\r\n        ","import React, { FC } from 'react';\r\nimport AppHeader from '../../components/app-header/app-header';\r\n\r\nconst WithAppHeader: FC = ({ children }) => {\r\n    return (\r\n        <>\r\n            <AppHeader/>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WithAppHeader;","import {\r\n    TypedUseSelectorHook,\r\n    useDispatch as dispatchHook,\r\n    useSelector as selectorHook\r\n  } from 'react-redux';\r\n  import { AppDispatch, AppThunk, RootState } from './index';\r\n  \r\n  // Хук «знает» структуру хранилища\r\n  export const useSelector: TypedUseSelectorHook<RootState> = selectorHook;\r\n  \r\n  // Хук не даст отправить экшен, который ему не знаком\r\n  export const useDispatch = () => dispatchHook<AppDispatch | AppThunk>(); ","import { Counter, CurrencyIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDrag } from 'react-dnd';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport s from './burger-ingredients-item.module.sass';\r\n\r\nimport { TIngredient } from '../../services/types/data';\r\n\r\ninterface IBurgerIngredientsItemProps {\r\n    ingredient: TIngredient;\r\n    count: number;\r\n    onIngredientClick: (\r\n        ingredient: TIngredient\r\n    ) => void\r\n}\r\n\r\nconst BurgerIngredientsItem = ({ ingredient, count, onIngredientClick }: IBurgerIngredientsItemProps) => {\r\n\r\n    const location = useLocation();\r\n\r\n    const { name, price, image, _id } = ingredient;\r\n\r\n    const [, ingredientRef] = useDrag({\r\n        type: 'constructor',\r\n        item: ingredient,\r\n        // collect: monitor => ({\r\n        //     isDrag: monitor.isDragging()\r\n        // })\r\n    })\r\n\r\n\r\n    return (\r\n        <Link \r\n            to={{\r\n                pathname: `/ingredients/${_id}`,\r\n                state: { background: location }\r\n            }}\r\n            onClick={() => onIngredientClick(ingredient)} \r\n            className={`${s.ingredient}`}\r\n            ref={ingredientRef}\r\n            data-test=\"ingredient\"\r\n        >\r\n            <div className=\"pl-4 pb-1 pr-4\">\r\n                {count && (\r\n                    <div className={s.ingredient_counter}>\r\n                        <Counter count={count} size=\"default\" />\r\n                    </div>\r\n                )}\r\n                <img className={`${s.ingredient_img} mb-1`} src={image} alt={name} />\r\n                <div className={`${s.ingredient_price_wrapper} mb-1`}>\r\n                    <span className=\"text text_type_digits-default\">{price}</span>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n            </div>\r\n            <h3 className={`${s.ingredient_name} text text_type_main-default`}>{name}</h3>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default BurgerIngredientsItem;","import { useMemo } from 'react';\r\nimport { useSelector } from '../../hooks/hooks';\r\n\r\nimport BurgerIngredientsItem from '../burger-ingredients-item/burger-ingredients-item';\r\n\r\nimport s from './burger-ingredients-list.module.sass';\r\nimport { TIngredient, TIngredientsCategoryTitle, TIngredientsCategoryType } from '../../services/types/data';\r\n\r\ninterface IBurgerIngredientsListProps {\r\n    title: TIngredientsCategoryTitle;\r\n    type: TIngredientsCategoryType;\r\n    onIngredientClick: (\r\n        item: TIngredient\r\n    ) => void\r\n}\r\n\r\ninterface ICounters {\r\n    [name: string]: number; \r\n}\r\n\r\nconst BurgerIngredientsList = ({ title, type, onIngredientClick }: IBurgerIngredientsListProps) => {\r\n\r\n    const { ingredients, constructorIngredients, constructorBun } = useSelector(store => ({\r\n        ingredients: store.ingredients.ingredients,\r\n        constructorIngredients: store.ingredients.constructorIngredients,\r\n        constructorBun: store.ingredients.constructorBun\r\n    }));\r\n\r\n    const counters = useMemo(() => {\r\n\t\tconst counter: ICounters = {};\r\n\r\n\t\tconstructorIngredients.map((ingredient: TIngredient): void => {\r\n\t\t\tif (!counter[ingredient._id]) {\r\n                counter[ingredient._id] = 0;\r\n            }\r\n\t\t\tcounter[ingredient._id]++;\r\n\t\t});\r\n\r\n\t\tif (constructorBun) {\r\n            counter[constructorBun._id] = 2;\r\n        }\r\n\t\treturn counter;\r\n\t}, [constructorIngredients, constructorBun]);\r\n\r\n    const ingredientsArr = ingredients?.map((ingredient: TIngredient) => {\r\n        if (ingredient.type === type) {\r\n            return (\r\n                <BurgerIngredientsItem \r\n                    key={ingredient._id} \r\n                    ingredient={ingredient} \r\n                    count={counters[ingredient._id]}\r\n                    onIngredientClick={onIngredientClick}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div data-scroll-id={type} className={`${s.type_wrapper} pt-10`}>\r\n            <h3 className=\"text text_type_main-medium mb-6\">{title}</h3>\r\n            <div className={s.ingredients_type_wrapper}>\r\n                {ingredientsArr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BurgerIngredientsList;","import s from './loader.module.sass';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={s.loader}>\r\n            <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\" \r\n                style={{background: 'none', display: 'block', shapeRendering: 'auto'}} \r\n                width=\"60px\" \r\n                height=\"60px\" \r\n                viewBox=\"0 0 100 100\" \r\n                preserveAspectRatio=\"xMidYMid\"\r\n            >\r\n                <circle cx=\"84\" cy=\"50\" r=\"10\" fill=\"#0051a2\">\r\n                    <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"0.25s\" calcMode=\"spline\" keyTimes=\"0;1\" values=\"10;0\" keySplines=\"0 0.5 0.5 1\" begin=\"0s\"></animate>\r\n                    <animate attributeName=\"fill\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"discrete\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"#0051a2;#89bff8;#408ee0;#1b75be;#0051a2\" begin=\"0s\"></animate>\r\n                </circle><circle cx=\"16\" cy=\"50\" r=\"10\" fill=\"#0051a2\">\r\n                <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"0;0;10;10;10\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"0s\"></animate>\r\n                <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"16;16;16;50;84\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"0s\"></animate>\r\n                </circle><circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"#1b75be\">\r\n                <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"0;0;10;10;10\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.25s\"></animate>\r\n                <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"16;16;16;50;84\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.25s\"></animate>\r\n                </circle><circle cx=\"84\" cy=\"50\" r=\"10\" fill=\"#408ee0\">\r\n                <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"0;0;10;10;10\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.5s\"></animate>\r\n                <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"16;16;16;50;84\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.5s\"></animate>\r\n                </circle><circle cx=\"16\" cy=\"50\" r=\"10\" fill=\"#89bff8\">\r\n                <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"0;0;10;10;10\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.75s\"></animate>\r\n                <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1s\" calcMode=\"spline\" keyTimes=\"0;0.25;0.5;0.75;1\" values=\"16;16;16;50;84\" keySplines=\"0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1\" begin=\"-0.75s\"></animate>\r\n                </circle>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import { useState, useRef } from 'react';\r\nimport { Tab } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useSelector } from '../../services/types/hooks';\r\n\r\nimport BurgerIngredientsList from '../burger-ingredients-list/burger-ingredients-list';\r\nimport Loader from '../loader/loader';\r\n\r\nimport s from './burger-ingredients.module.sass';\r\nimport { TIngredient, TIngredientsCategoryTitle, TIngredientsCategoryType } from '../../services/types/data';\r\n\r\ninterface IBurgerIngredientsProps {\r\n    handleIngredientClick: (\r\n        item: TIngredient\r\n    ) => void\r\n}\r\n\r\nconst BurgerIngredients = ({ handleIngredientClick }: IBurgerIngredientsProps) => {\r\n\r\n    const [currentTab, setCurrentTab] = useState<TIngredientsCategoryType>('bun');\r\n    const boxRef = useRef<HTMLDivElement>(null);\r\n    const { ingredients } = useSelector(store => ({\r\n        ingredients: store.ingredients.ingredients,\r\n    }));\r\n\r\n    const switchCurrentTab = (type: TIngredientsCategoryType): void => {\r\n        const element = document.querySelector(`[data-scroll-id=\"${type}\"]`)\r\n        if (element && element instanceof HTMLElement) {\r\n            const offset = element.offsetTop\r\n            boxRef.current?.scroll({\r\n                left: 0,\r\n                top: offset - 247,\r\n                behavior: 'smooth'\r\n            })\r\n        }\r\n    }\r\n\r\n    const switchCurrentTabOnScroll = (e: any): void => {\r\n        const bunContainer = document.querySelector<HTMLElement>(`[data-scroll-id=\"bun\"]`);\r\n        const sauceContainer = document.querySelector<HTMLElement>(`[data-scroll-id=\"sauce\"]`);\r\n        const mainContainer = document.querySelector<HTMLElement>(`[data-scroll-id=\"main\"]`);\r\n\r\n        if ((e.target.scrollTop + 248) > bunContainer!.offsetTop && (e.target.scrollTop + 248) < sauceContainer!.offsetTop && currentTab !== 'bun') {\r\n            setCurrentTab('bun')\r\n            return\r\n        }\r\n        if ((e.target.scrollTop + 248) > sauceContainer!.offsetTop && (e.target.scrollTop + 248) < mainContainer!.offsetTop && currentTab !== 'sauce') {\r\n            setCurrentTab('sauce')\r\n            return\r\n        }\r\n        if ((e.target.scrollTop + 248) > mainContainer!.offsetTop && currentTab !== 'main') {\r\n            setCurrentTab('main')\r\n            return\r\n        }\r\n        return\r\n    }\r\n\r\n    const ingredientCategoryList: Array<{title: TIngredientsCategoryTitle; type: TIngredientsCategoryType;}> = [\r\n        {title: 'Булки', type: 'bun'},\r\n        {title: 'Соусы', type: 'sauce'},\r\n        {title: 'Начинки', type: 'main'},\r\n    ]\r\n\r\n    return (\r\n        <section className={`${s.section_container} pt-10`}>\r\n            <h1 className={`${s.title} text text_type_main-large mb-5`}>Соберите бургер</h1>\r\n                <div className={s.ingredients_wrapper}>\r\n                    {!ingredients && <Loader />}\r\n                    {ingredients && (\r\n                        <>\r\n                            <div className={`${s.tab_wrapper}`}>\r\n                                <Tab \r\n                                    active={currentTab === 'bun'}\r\n                                    onClick={() => switchCurrentTab('bun')}\r\n                                    value=\"Начинки\"\r\n                                >Булки</Tab>\r\n                                <Tab \r\n                                    active={currentTab === 'sauce'}\r\n                                    onClick={() => switchCurrentTab('sauce')}\r\n                                    value=\"Начинки\"\r\n                                >Соусы</Tab>\r\n                                <Tab \r\n                                    active={currentTab === 'main'}\r\n                                    onClick={() => switchCurrentTab('main')}\r\n                                    value=\"Начинки\"\r\n                                >Начинки</Tab>\r\n                            </div>\r\n                            <div \r\n                                onScroll={switchCurrentTabOnScroll}\r\n                                ref={boxRef} \r\n                                className={`${s.ingredients_items_wrapper} pl-4 pb-10`}\r\n                            >\r\n                                {ingredientCategoryList.map((category) => (\r\n                                    <BurgerIngredientsList \r\n                                        key={category.type}\r\n                                        onIngredientClick={handleIngredientClick} \r\n                                        title={category.title} \r\n                                        type={category.type}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default BurgerIngredients;","export const GET_INGREDIENTS_REQUEST: \"GET_INGREDIENTS_REQUEST\" = \"GET_INGREDIENTS_REQUEST\";\r\nexport const GET_INGREDIENTS_SUCCESS: \"GET_INGREDIENTS_SUCCESS\" = \"GET_INGREDIENTS_SUCCESS\";\r\nexport const GET_INGREDIENTS_FAILED: \"GET_INGREDIENTS_FAILED\" = \"GET_INGREDIENTS_FAILED\";\r\nexport const ADD_INGREDIENT_TO_CONSTRUCTOR: \"ADD_INGREDIENT_TO_CONSTRUCTOR\" = \"ADD_INGREDIENT_TO_CONSTRUCTOR\";\r\nexport const DELETE_INGREDIENT_FROM_CONSTRUCTOR: \"DELETE_INGREDIENT_FROM_CONSTRUCTOR\" = \"DELETE_INGREDIENT_FROM_CONSTRUCTOR\";\r\nexport const ADD_BUN_TO_CONSTRUCTOR: \"ADD_BUN_TO_CONSTRUCTOR\" = \"ADD_BUN_TO_CONSTRUCTOR\";\r\nexport const MOVE_INGREDIENT_IN_CONSTRUCTOR: \"MOVE_INGREDIENT_IN_CONSTRUCTOR\" = \"MOVE_INGREDIENT_IN_CONSTRUCTOR\";\r\nexport const RESET_CONSTRUCTOR: \"RESET_CONSTRUCTOR\" = \"RESET_CONSTRUCTOR\";","import { useRef } from 'react';\r\nimport { useDispatch } from '../../hooks/hooks';\r\nimport {  ConstructorElement, DragIcon  } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport { deleteIngredientFromConstructor, moveIngredientInConstructor } from '../../services/actions/ingredients/ingredients';\r\n\r\nimport s from './burger-constructor-item.module.sass';\r\n\r\nimport { TIngredientConstructor } from '../../services/types/data';\r\n\r\ninterface IBurgerConstructorItemProps {\r\n    ingredient: TIngredientConstructor;\r\n    index: number;\r\n}\r\n\r\nconst BurgerConstructorItem = ({ ingredient, index }: IBurgerConstructorItemProps) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const ref = useRef<HTMLDivElement>(null);\r\n\r\n    const deleteIngredient = (ingredient: TIngredientConstructor): void => {\r\n        dispatch(deleteIngredientFromConstructor(ingredient))\r\n    }\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'ingredient',\r\n        collect: monitor => ({\r\n            isHover: monitor.isOver()\r\n        }),\r\n        hover(item: { index: number }, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            if (clientOffset) {\r\n                const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n\r\n                if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                    return;\r\n                }\r\n                if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                    return;\r\n                }\r\n                dispatch(moveIngredientInConstructor({hoverIndex, dragIndex}))\r\n                item.index = hoverIndex;\r\n            }\r\n        },\r\n    });\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: 'ingredient',\r\n        item: () => {\r\n            return { index };\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    drag(drop(ref));\r\n\r\n    return (\r\n        <div \r\n            ref={ref} \r\n            className={`${s.constructor_item} ${isDragging ? s.active : ''} show_item`} \r\n            data-test=\"constructor-ingredient\"\r\n        >\r\n            <div className={s.drag_icon}>\r\n                <DragIcon type=\"secondary\" />\r\n            </div>\r\n            <ConstructorElement \r\n                text={ingredient.name}\r\n                price={ingredient.price}\r\n                thumbnail={ingredient.image}\r\n                handleClose={() => deleteIngredient(ingredient)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BurgerConstructorItem;","import {\r\n    GET_INGREDIENTS_REQUEST,\r\n    GET_INGREDIENTS_SUCCESS, \r\n    GET_INGREDIENTS_FAILED,\r\n    ADD_INGREDIENT_TO_CONSTRUCTOR,\r\n    DELETE_INGREDIENT_FROM_CONSTRUCTOR,\r\n    ADD_BUN_TO_CONSTRUCTOR,\r\n    MOVE_INGREDIENT_IN_CONSTRUCTOR,\r\n    RESET_CONSTRUCTOR\r\n} from '../../constants/ingredients';\r\n// import { AppDispatch, AppThunk } from '../types';\r\n\r\nimport { TIngredient, TIngredientConstructor, TMovingIngredient } from '../../types/data';\r\n\r\nconst _apiUrl = 'https://norma.nomoreparties.space/api';\r\n\r\nexport interface IGetIngredientsRequestAction {\r\n    readonly type: typeof GET_INGREDIENTS_REQUEST;\r\n}\r\nexport interface IGetIngredientsSuccessAction {\r\n    readonly type: typeof GET_INGREDIENTS_SUCCESS;\r\n    readonly payload: ReadonlyArray<TIngredient>\r\n}\r\nexport interface IGetIngredientsFailedAction {\r\n    readonly type: typeof GET_INGREDIENTS_FAILED;\r\n}\r\nexport interface IAddIngredienToConstructorAction {\r\n    readonly type: typeof ADD_INGREDIENT_TO_CONSTRUCTOR;\r\n    payload: TIngredientConstructor\r\n}\r\nexport interface IDeleteIngredientFromConstructorAction {\r\n    readonly type: typeof DELETE_INGREDIENT_FROM_CONSTRUCTOR;\r\n    payload: TIngredientConstructor\r\n}\r\nexport interface IAddBunToConstructorAction {\r\n    readonly type: typeof ADD_BUN_TO_CONSTRUCTOR;\r\n    payload: TIngredient\r\n}\r\nexport interface IMoveIngredientInConstructorAction {\r\n    readonly type: typeof MOVE_INGREDIENT_IN_CONSTRUCTOR;\r\n    payload: TMovingIngredient;\r\n}\r\nexport interface IResetConstructorAction {\r\n    readonly type: typeof RESET_CONSTRUCTOR;\r\n};\r\n\r\nexport type TIngredientsActions = \r\n    | IGetIngredientsRequestAction\r\n    | IGetIngredientsSuccessAction\r\n    | IGetIngredientsFailedAction\r\n    | IAddIngredienToConstructorAction\r\n    | IDeleteIngredientFromConstructorAction\r\n    | IAddBunToConstructorAction\r\n    | IMoveIngredientInConstructorAction\r\n    | IResetConstructorAction\r\n;\r\n\r\nexport const getIngredientsRequest = (): IGetIngredientsRequestAction  => ({\r\n    type: GET_INGREDIENTS_REQUEST\r\n})\r\nexport const getIngredientsSuccess = (ingredients: ReadonlyArray<TIngredient>): IGetIngredientsSuccessAction  => ({\r\n    type: GET_INGREDIENTS_SUCCESS,\r\n    payload: ingredients\r\n})\r\nexport const getIngredientsFailed = (): IGetIngredientsFailedAction  => ({\r\n    type: GET_INGREDIENTS_FAILED\r\n})\r\nexport const addIngredientToConstructor = (ingredient: TIngredientConstructor): IAddIngredienToConstructorAction  => ({\r\n    type: ADD_INGREDIENT_TO_CONSTRUCTOR,\r\n    payload: ingredient\r\n})\r\nexport const deleteIngredientFromConstructor = (ingredient: TIngredientConstructor): IDeleteIngredientFromConstructorAction  => ({\r\n    type: DELETE_INGREDIENT_FROM_CONSTRUCTOR,\r\n    payload: ingredient\r\n})\r\nexport const addBunToConstructor = (bun: TIngredient): IAddBunToConstructorAction  => ({\r\n    type: ADD_BUN_TO_CONSTRUCTOR,\r\n    payload: bun\r\n})\r\nexport const moveIngredientInConstructor = (dragObj: TMovingIngredient): IMoveIngredientInConstructorAction  => ({\r\n    type: MOVE_INGREDIENT_IN_CONSTRUCTOR,\r\n    payload: dragObj\r\n})\r\nexport const resetConstructor = (): IResetConstructorAction  => ({\r\n    type: RESET_CONSTRUCTOR\r\n})\r\n\r\n// export const getIngredients: AppThunk = () => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(getIngredientsRequest());\r\n//         fetch(`${_apiUrl}/ingredients`).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(getIngredientsFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             dispatch(getIngredientsSuccess(response.data))\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }","import { useMemo } from 'react';\r\nimport { CurrencyIcon, ConstructorElement, Button  } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useSelector, useDispatch } from '../../hooks/hooks';\r\nimport { useDrop } from 'react-dnd';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport BurgerConstructorItem from '../burger-constructor-item/burger-constructor-item';\r\nimport { addBunToConstructor, addIngredientToConstructor } from '../../services/actions/ingredients/ingredients';\r\n\r\nimport { TIngredient, TIngredientConstructor } from '../../services/types/data';\r\n\r\nimport s from './burger-constructor.module.sass';\r\n\r\ninterface IBurgerConstructorProps {\r\n    handleOrderClick: (\r\n        location: object\r\n    ) => void\r\n}\r\n\r\nconst BurgerConstructor = ({ handleOrderClick }: IBurgerConstructorProps) => {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation()\r\n\r\n    const { constructorIngredients, constructorBun, user } = useSelector(store => ({\r\n        constructorIngredients: store.ingredients.constructorIngredients,\r\n        constructorBun: store.ingredients.constructorBun,\r\n        user: store.user.user\r\n    }));\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const makeOrder = (): void => {\r\n        if (!user) {\r\n            history.push({ pathname: '/login' })\r\n            return\r\n        }\r\n\r\n        if (constructorBun && constructorIngredients.length > 0) {\r\n            handleOrderClick(location)\r\n        }\r\n    }\r\n\r\n    const [, dropContainer] = useDrop({\r\n        accept: \"constructor\",\r\n        drop(item: TIngredient) {\r\n            if (item.type === 'bun') {\r\n                dispatch(addBunToConstructor(item))\r\n                return\r\n            }\r\n            dispatch(addIngredientToConstructor({...item, drag_id: uuidv4()}))\r\n        }\r\n    })\r\n\r\n    const totalPrice: number = useMemo(() => {\r\n        if (constructorBun || constructorIngredients.length > 0) {\r\n            const totalPrice = constructorIngredients.reduce((acc: number, curr: TIngredientConstructor): number => {\r\n                return acc + curr.price\r\n            }, 0)\r\n    \r\n            return (totalPrice + (constructorBun ? constructorBun.price : 0) * 2)\r\n        } else {\r\n            return 0\r\n        }\r\n    }, [constructorIngredients, constructorBun])\r\n\r\n    return (\r\n        <section className={`${s.section_container} pt-25`}>\r\n                <div \r\n                    className={`pt-4 pr-4`}\r\n                    ref={dropContainer}\r\n                    data-test=\"constructor\"\r\n                >\r\n                    {!constructorBun && constructorIngredients.length === 0 && (\r\n                        <p className={`${s.no_ingredients} text text_type_main-default`}>Перетащите сюда булочку и ингредиенты</p>\r\n                    )}\r\n                    {constructorBun && (\r\n                        <div className={`pl-8 mb-4 show_item`}>\r\n                            <ConstructorElement \r\n                                    type=\"top\"\r\n                                    isLocked={true}\r\n                                    text={`${constructorBun.name} (верх)`}\r\n                                    price={constructorBun.price}\r\n                                    thumbnail={constructorBun.image}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {constructorIngredients.length > 0 && (\r\n                        <div className={`${s.wrapper_inner} mb-4`}>\r\n                            {constructorIngredients.map((ingredient: TIngredientConstructor, index: number) => (\r\n                                    <BurgerConstructorItem\r\n                                        index={index}\r\n                                        ingredient={ingredient}\r\n                                        key={ingredient.drag_id}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    {constructorBun && (\r\n                        <div className={`pl-8 pr-4 show_item`}>\r\n                            <ConstructorElement \r\n                                    type=\"bottom\"\r\n                                    isLocked={true}\r\n                                    text={`${constructorBun.name} (низ)`}\r\n                                    price={constructorBun.price}\r\n                                    thumbnail={constructorBun.image}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n           <div className={`${s.constructor_footer}`}>\r\n                <div className={`${s.total_wrapper} mr-10`}>\r\n                    <span className=\"text text_type_digits-medium\">{totalPrice}</span>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n                <div onClick={makeOrder}>\r\n                    <Button type=\"primary\" size=\"medium\">\r\n                        Оформить заказ\r\n                    </Button>\r\n                </div>\r\n           </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default BurgerConstructor;","import React from 'react';\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nimport BurgerIngredients from '../../components/burger-ingredients/burger-ingredients';\r\nimport BurgerConstructor from '../../components/burger-constructor/burger-constructor';\r\n\r\nimport s from './constructor-page.module.sass';\r\nimport { TIngredient } from '../../services/types/data'\r\n\r\ninterface IConstructorPageProps {\r\n    handleIngredientClick: (\r\n        item: TIngredient\r\n    ) => void;\r\n    handleOrderClick: (\r\n        propLocation: object\r\n    ) => void;\r\n}\r\n\r\nconst ConstructorPage = ({ handleIngredientClick, handleOrderClick }: IConstructorPageProps) => {\r\n\r\n    return (\r\n        <>\r\n            <DndProvider backend={HTML5Backend}>\r\n                <section className={s.table_wrapper}>\r\n                    <BurgerIngredients handleIngredientClick={handleIngredientClick} />\r\n                    <BurgerConstructor handleOrderClick={handleOrderClick} />\r\n                </section>\r\n            </DndProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConstructorPage;","export const WS_ALL_ORDERS_CONNECTION_SUCCESS: \"WS_ALL_ORDERS_CONNECTION_SUCCESS\" = 'WS_ALL_ORDERS_CONNECTION_SUCCESS';\r\nexport const WS_ALL_ORDERS_CONNECTION_ERROR: \"WS_ALL_ORDERS_CONNECTION_ERROR\" = 'WS_ALL_ORDERS_CONNECTION_ERROR';\r\nexport const WS_ALL_ORDERS_CONNECTION_CLOSED: \"WS_ALL_ORDERS_CONNECTION_CLOSED\" = 'WS_ALL_ORDERS_CONNECTION_CLOSED';\r\nexport const WS_ALL_ORDERS_GET_MESSAGE: \"WS_ALL_ORDERS_GET_MESSAGE\" = 'WS_ALL_ORDERS_GET_MESSAGE';\r\nexport const WS_ALL_ORDERS_CONNECTION_START: \"WS_ALL_ORDERS_CONNECTION_START\" = 'WS_ALL_ORDERS_CONNECTION_START';\r\n\r\nexport const WS_USER_ORDERS_CONNECTION_SUCCESS: \"WS_USER_ORDERS_CONNECTION_SUCCESS\" = 'WS_USER_ORDERS_CONNECTION_SUCCESS';\r\nexport const WS_USER_ORDERS_CONNECTION_ERROR: \"WS_USER_ORDERS_CONNECTION_ERROR\" = 'WS_USER_ORDERS_CONNECTION_ERROR';\r\nexport const WS_USER_ORDERS_CONNECTION_CLOSED: \"WS_USER_ORDERS_CONNECTION_CLOSED\" = 'WS_USER_ORDERS_CONNECTION_CLOSED';\r\nexport const WS_USER_ORDERS_GET_MESSAGE: \"WS_USER_ORDERS_GET_MESSAGE\" = 'WS_USER_ORDERS_GET_MESSAGE';\r\nexport const WS_USER_ORDERS_CONNECTION_START: \"WS_USER_ORDERS_CONNECTION_START\" = 'WS_USER_ORDERS_CONNECTION_START';","export const GET_ORDER_REQUEST: \"GET_ORDER_REQUEST\" = \"GET_ORDER_REQUEST\";\r\nexport const GET_ORDER_SUCCESS: \"GET_ORDER_SUCCESS\" = \"GET_ORDER_SUCCESS\";\r\nexport const GET_ORDER_FAILED: \"GET_ORDER_FAILED\" = \"GET_ORDER_FAILED\";\r\nexport const ORDER_RESET: \"ORDER_RESET\" = \"ORDER_RESET\";\r\n\r\n// export const GET_ALL_ORDERS_SUCCESS: \"GET_ALL_ORDERS_SUCCESS\" = \"GET_ALL_ORDERS_SUCCESS\";\r\n// export const GET_ALL_ORDERS_FAILED: \"GET_ALL_ORDERS_FAILED\" = \"GET_ALL_ORDERS_FAILED\";","import { getCookie } from '../../../utils/cookies';\r\nimport { resetConstructor } from '../ingredients/ingredients'\r\n\r\nimport {\r\n  GET_ORDER_REQUEST,\r\n  GET_ORDER_SUCCESS,\r\n  GET_ORDER_FAILED,\r\n  ORDER_RESET\r\n} from '../../constants/order';\r\n\r\nimport { AppDispatch, AppThunk } from '../../types';\r\nimport { TOrder } from '../../types/data';\r\n\r\nconst _apiUrl = 'https://norma.nomoreparties.space/api';\r\n\r\nexport interface IGetOrderRequestAction {\r\n  readonly type: typeof GET_ORDER_REQUEST;\r\n}\r\nexport interface IGetOrderSuccessAction {\r\n  readonly type: typeof GET_ORDER_SUCCESS;\r\n  payload: TOrder\r\n}\r\nexport interface IGetOrderFailedAction {\r\n  readonly type: typeof GET_ORDER_FAILED;\r\n}\r\nexport interface IIOrderResetAction {\r\n  readonly type: typeof ORDER_RESET;\r\n}\r\n\r\nexport type TOrderActions = \r\n  | IGetOrderRequestAction\r\n  | IGetOrderSuccessAction\r\n  | IGetOrderFailedAction\r\n  | IIOrderResetAction\r\n;\r\n\r\nexport const getOrderRequest = (): IGetOrderRequestAction => ({\r\n  type: GET_ORDER_REQUEST\r\n})\r\nexport const getOrderSuccess = (order: TOrder): IGetOrderSuccessAction => ({\r\n  type: GET_ORDER_SUCCESS,\r\n  payload: order\r\n})\r\nexport const getOrderFailed = (): IGetOrderFailedAction => ({\r\n  type: GET_ORDER_FAILED\r\n})\r\nexport const orderReset = (): IIOrderResetAction => ({\r\n  type: ORDER_RESET\r\n})\r\n\r\n// export const makeOrder: AppThunk = (ingredientsIdArr: ReadonlyArray<string>) => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(getOrderRequest())\r\n//         fetch(`${_apiUrl}/orders`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8',\r\n//               'Authorization': 'Bearer ' + getCookie('accessToken')\r\n//             },\r\n//             body: JSON.stringify({\r\n//               \"ingredients\": ingredientsIdArr\r\n//             })\r\n//         }).then(response => {\r\n//           if (response.ok) {\r\n//             return response.json()\r\n//           } else {\r\n//             dispatch(getOrderFailed())\r\n//           }\r\n//         }).then(response => {\r\n//           dispatch(getOrderSuccess(response.order))\r\n//           dispatch(resetConstructor())\r\n//           }).catch(err => {\r\n//             console.log(err);\r\n//           })\r\n//     }\r\n// }","export const USER_REGISTER_REQUEST: \"USER_REGISTER_REQUEST\" = \"USER_REGISTER_REQUEST\";\r\nexport const USER_REGISTER_SUCCESS: \"USER_REGISTER_SUCCESS\" = \"USER_REGISTER_SUCCESS\";\r\nexport const USER_REGISTER_FAILED: \"USER_REGISTER_FAILED\" = \"USER_REGISTER_FAILED\";\r\n\r\nexport const USER_LOGOUT_REQUEST: \"USER_LOGOUT_REQUEST\" = \"USER_LOGOUT_REQUEST\";\r\nexport const USER_LOGOUT_SUCCESS: \"USER_LOGOUT_SUCCESS\" = \"USER_LOGOUT_SUCCESS\";\r\nexport const USER_LOGOUT_FAILED: \"USER_LOGOUT_FAILED\" = \"USER_LOGOUT_FAILED\";\r\n\r\nexport const USER_LOGIN_REQUEST: \"USER_LOGIN_REQUEST\" = \"USER_LOGIN_REQUEST\";\r\nexport const USER_LOGIN_SUCCESS: \"USER_LOGIN_SUCCESS\" = \"USER_LOGIN_SUCCESS\";\r\nexport const USER_LOGIN_FAILED: \"USER_LOGIN_FAILED\" = \"USER_LOGIN_FAILED\";\r\n\r\nexport const UPDATE_USER_INFO_REQUEST: \"UPDATE_USER_INFO_REQUEST\" = \"UPDATE_USER_INFO_REQUEST\";\r\nexport const UPDATE_USER_INFO_SUCCESS: \"UPDATE_USER_INFO_SUCCESS\" = \"UPDATE_USER_INFO_SUCCESS\";\r\nexport const UPDATE_USER_INFO_FAILED: \"UPDATE_USER_INFO_FAILED\" = \"UPDATE_USER_INFO_FAILED\";\r\n\r\nexport const GET_USER_INFO_REQUEST: \"GET_USER_INFO_REQUEST\" = \"GET_USER_INFO_REQUEST\";\r\nexport const GET_USER_INFO_SUCCESS: \"GET_USER_INFO_SUCCESS\" = \"GET_USER_INFO_SUCCESS\"\r\nexport const GET_USER_INFO_FAILED: \"GET_USER_INFO_FAILED\" = \"GET_USER_INFO_FAILED\";\r\n\r\nexport const SET_EMAIL: \"SET_EMAIL\" = \"SET_EMAIL\";\r\nexport const RESET_EMAIL: \"RESET_EMAIL\" = \"RESET_EMAIL\";\r\n\r\nexport const SET_PASSWORD: \"SET_PASSWORD\" = \"SET_PASSWORD\";\r\nexport const RESET_PASSWORD: \"RESET_PASSWORD\" = \"RESET_PASSWORD\";\r\n\r\nexport const SET_NAME: \"SET_NAME\" = \"SET_NAME\";\r\nexport const RESET_NAME: \"RESET_NAME\" = \"RESET_NAME\";","// import { setCookie, getCookie, deleteCookie } from \"../../utils/cookies\";\r\nimport {\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAILED,\r\n\r\n    USER_LOGOUT_REQUEST,\r\n    USER_LOGOUT_SUCCESS,\r\n    USER_LOGOUT_FAILED,\r\n\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAILED,\r\n\r\n    UPDATE_USER_INFO_REQUEST,\r\n    UPDATE_USER_INFO_FAILED,\r\n    UPDATE_USER_INFO_SUCCESS,\r\n\r\n    GET_USER_INFO_REQUEST,\r\n    GET_USER_INFO_SUCCESS,\r\n    GET_USER_INFO_FAILED,\r\n\r\n    SET_EMAIL,\r\n    RESET_EMAIL,\r\n    SET_PASSWORD,\r\n    RESET_PASSWORD,\r\n    SET_NAME,\r\n    RESET_NAME\r\n} from '../../constants/user';\r\n\r\n// import { AppDispatch, AppThunk } from \"../types\";\r\nimport { TUser } from \"../../types/data\";\r\n\r\nexport interface IUserLoginRequestAction {\r\n    readonly type: typeof USER_LOGIN_REQUEST\r\n}\r\nexport interface IUserLoginSuccessAction {\r\n    readonly type: typeof USER_LOGIN_SUCCESS\r\n}\r\nexport interface IUserLoginFailedAction {\r\n    readonly type: typeof USER_LOGIN_FAILED\r\n}\r\n\r\nexport interface IUserLogoutRequestAction {\r\n    readonly type: typeof USER_LOGOUT_REQUEST\r\n}\r\nexport interface IUserLogoutSuccessAction {\r\n    readonly type: typeof USER_LOGOUT_SUCCESS\r\n}\r\nexport interface IUserLogoutFailedAction {\r\n    readonly type: typeof USER_LOGOUT_FAILED\r\n}\r\n\r\nexport interface IUpdateUserInfoRequestAction {\r\n    readonly type: typeof UPDATE_USER_INFO_REQUEST\r\n}\r\nexport interface IUpdateUserInfoSuccessAction {\r\n    readonly type: typeof UPDATE_USER_INFO_SUCCESS\r\n}\r\nexport interface IUpdateUserInfoFailedAction {\r\n    readonly type: typeof UPDATE_USER_INFO_FAILED\r\n}\r\n\r\nexport interface IUserRegisterRequestAction {\r\n    readonly type: typeof USER_REGISTER_REQUEST\r\n}\r\nexport interface IUserRegisterSuccessAction {\r\n    readonly type: typeof USER_REGISTER_SUCCESS\r\n}\r\nexport interface IUserRegisterFailedAction {\r\n    readonly type: typeof USER_REGISTER_FAILED\r\n}\r\n\r\nexport interface IGetUserInfoRequestAction {\r\n    readonly type: typeof GET_USER_INFO_REQUEST\r\n}\r\nexport interface IGetUserInfoSuccessAction {\r\n    readonly type: typeof GET_USER_INFO_SUCCESS;\r\n    payload: null | TUser\r\n}\r\nexport interface IGetUserInfoFailedAction {\r\n    readonly type: typeof GET_USER_INFO_FAILED;\r\n}\r\n\r\nexport interface ISetEmailAction {\r\n    readonly type: typeof SET_EMAIL;\r\n    payload: string\r\n}\r\nexport interface IResetEmailAction {\r\n    readonly type: typeof RESET_EMAIL;\r\n}\r\nexport interface ISetPasswordAction {\r\n    readonly type: typeof SET_PASSWORD;\r\n    payload: string\r\n}\r\nexport interface IResetPasswordAction {\r\n    readonly type: typeof RESET_PASSWORD;\r\n}\r\nexport interface ISetNameAction {\r\n    readonly type: typeof SET_NAME;\r\n    payload: string\r\n}\r\nexport interface IResetNameAction {\r\n    readonly type: typeof RESET_NAME;\r\n}\r\n\r\nexport type TUserActions = \r\n    | ISetEmailAction\r\n    | IResetEmailAction\r\n    | ISetPasswordAction\r\n    | IResetPasswordAction\r\n    | ISetNameAction\r\n    | IResetNameAction\r\n\r\n    | IUserLoginRequestAction\r\n    | IUserLoginFailedAction\r\n    | IUserLoginSuccessAction    \r\n\r\n    | IUpdateUserInfoRequestAction\r\n    | IUpdateUserInfoSuccessAction\r\n    | IUpdateUserInfoFailedAction\r\n\r\n    | IUserLogoutRequestAction\r\n    | IUserLogoutSuccessAction\r\n    | IUserLogoutFailedAction\r\n\r\n    | IGetUserInfoRequestAction\r\n    | IGetUserInfoSuccessAction\r\n    | IGetUserInfoFailedAction\r\n\r\n    | IUserRegisterRequestAction\r\n    | IUserRegisterFailedAction\r\n    | IUserRegisterSuccessAction\r\n;\r\n\r\nexport const userLoginRequest = (): IUserLoginRequestAction => ({\r\n    type: USER_LOGIN_REQUEST\r\n})\r\nexport const userLoginSuccess = (): IUserLoginSuccessAction => ({\r\n    type: USER_LOGIN_SUCCESS\r\n})\r\nexport const userLoginFailed = (): IUserLoginFailedAction => ({\r\n    type: USER_LOGIN_FAILED\r\n})\r\n\r\nexport const updateUserInfoRequest = (): IUpdateUserInfoRequestAction => ({\r\n    type: UPDATE_USER_INFO_REQUEST\r\n})\r\nexport const updateUserInfoSuccess = (): IUpdateUserInfoSuccessAction => ({\r\n    type: UPDATE_USER_INFO_SUCCESS\r\n})\r\nexport const updateUserInfoFailed = (): IUpdateUserInfoFailedAction => ({\r\n    type: UPDATE_USER_INFO_FAILED\r\n})\r\n\r\nexport const userLogoutRequest = (): IUserLogoutRequestAction => ({\r\n    type: USER_LOGOUT_REQUEST\r\n})\r\nexport const userLogoutSuccess = (): IUserLogoutSuccessAction => ({\r\n    type: USER_LOGOUT_SUCCESS\r\n})\r\nexport const userLogoutFailed = (): IUserLogoutFailedAction => ({\r\n    type: USER_LOGOUT_FAILED\r\n})\r\n\r\nexport const getUserInfoRequest = (): IGetUserInfoRequestAction => ({\r\n    type: GET_USER_INFO_REQUEST\r\n})\r\nexport const getUserInfoSuccess = (user: null | TUser): IGetUserInfoSuccessAction => ({\r\n    type: GET_USER_INFO_SUCCESS,\r\n    payload: user\r\n})\r\nexport const getUserInfoFailed = (): IGetUserInfoFailedAction => ({\r\n    type: GET_USER_INFO_FAILED\r\n})\r\n\r\nexport const userRegisterRequest = (): IUserRegisterRequestAction => ({\r\n    type: USER_REGISTER_REQUEST\r\n})\r\nexport const userRegisterSuccess = (): IUserRegisterSuccessAction => ({\r\n    type: USER_REGISTER_SUCCESS\r\n})\r\nexport const userRegisterFailed = (): IUserRegisterFailedAction => ({\r\n    type: USER_REGISTER_FAILED\r\n})\r\n\r\nexport const setEmail = (email: string): ISetEmailAction => ({\r\n    type: SET_EMAIL,\r\n    payload: email\r\n})\r\nexport const resetEmail = (): IResetEmailAction => ({\r\n    type: RESET_EMAIL\r\n})\r\nexport const setPassword = (password: string): ISetPasswordAction => ({\r\n    type: SET_PASSWORD,\r\n    payload: password\r\n})\r\nexport const resetPassword = (): IResetPasswordAction => ({\r\n    type: RESET_PASSWORD\r\n})\r\nexport const setName = (name: string): ISetNameAction => ({\r\n    type: SET_NAME,\r\n    payload: name\r\n})\r\nexport const resetName = (): IResetNameAction => ({\r\n    type: RESET_NAME\r\n})\r\n\r\n// function updateAccessToken() {\r\n//     return fetch(`${_apiUrl}/auth/token`, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json;charset=utf-8'\r\n//         },\r\n//         body: JSON.stringify({\r\n//             token: localStorage.getItem('refreshToken')\r\n//         })\r\n//     }).then(response => {\r\n//         return response.json();\r\n//     })\r\n// }\r\n\r\n// function userInfoFetch() {\r\n//     return fetch(`${_apiUrl}/auth/user`, {\r\n//         method: 'GET',\r\n//         headers: {\r\n//             'Content-Type': 'application/json;charset=utf-8',\r\n//              Authorization: 'Bearer ' + getCookie('accessToken')\r\n//         }\r\n//     }).then(response => {\r\n//         return response.json()\r\n//     })\r\n// }\r\n\r\n// function updateUserInfoFetch(userObj: TUser & { password: string }) {\r\n//     return fetch(`${_apiUrl}/auth/user`, {\r\n//         method: 'PATCH',\r\n//         headers: {\r\n//             'Content-Type': 'application/json;charset=utf-8',\r\n//             Authorization: 'Bearer ' + getCookie('accessToken')\r\n//         },\r\n//         body: JSON.stringify(userObj)\r\n//     }).then(response => {\r\n//         return response.json()\r\n//     })\r\n// }\r\n\r\n// export const getUserInfo: AppThunk = () => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(setUserRequest());\r\n//         userInfoFetch().then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(getUserInfoSuccess(response.user))\r\n//                 dispatch(setName(response.user.name))\r\n//                 dispatch(setEmail(response.user.email))\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//                 if (response.message === 'jwt expired') {\r\n//                     updateAccessToken().then(data => {\r\n//                         if (data.success) {\r\n//                             const accessToken = data.accessToken.split('Bearer ')[1];\r\n//                             const refreshToken = data.refreshToken;\r\n\r\n//                             setCookie('accessToken', accessToken);\r\n//                             localStorage.setItem('refreshToken', refreshToken)\r\n\r\n//                             userInfoFetch().then(response => {\r\n//                                 dispatch(getUserInfoSuccess(response.user))\r\n//                                 dispatch(setName(response.user.name))\r\n//                                 dispatch(setEmail(response.user.email))\r\n//                             }).catch(err => {\r\n//                                 console.log(err);\r\n//                             })\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export const updateUserInfo: AppThunk = (userObj: TUser & { password: string }) => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(getUserInfoRequest());\r\n//         updateUserInfoFetch(userObj).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(getUserInfoSuccess(response.user))\r\n//                 dispatch(setName(response.user.name))\r\n//                 dispatch(setEmail(response.user.email))\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//                 if (response.message === 'jwt expired') {\r\n//                     updateAccessToken().then(data => {\r\n//                         if (data.success) {\r\n//                             const accessToken = data.accessToken.split('Bearer ')[1];\r\n//                             const refreshToken = data.refreshToken;\r\n\r\n//                             setCookie('accessToken', accessToken);\r\n//                             localStorage.setItem('refreshToken', refreshToken)\r\n\r\n//                             updateUserInfoFetch(userObj).then(response => {\r\n//                                 dispatch(getUserInfoSuccess(response.user))\r\n//                                 dispatch(setName(response.user.name))\r\n//                                 dispatch(setEmail(response.user.email))\r\n//                             }).catch(err => {\r\n//                                 console.log(err);\r\n//                             })\r\n//                         }\r\n//                     })\r\n//                 }\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export const userRegister: AppThunk = (name: string, email: string, password: string) => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(getUserInfoRequest());\r\n//         fetch(`${_apiUrl}/auth/register`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 \"name\": name,\r\n//                 \"email\": email,\r\n//                 \"password\": password\r\n//             })\r\n//         }).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(getUserInfoSuccess(response.user))\r\n//                 dispatch(resetEmail())\r\n//                 dispatch(resetPassword())\r\n//                 dispatch(resetName())\r\n\r\n//                 const accessToken = response.accessToken.split('Bearer ')[1];\r\n//                 const refreshToken = response.refreshToken;\r\n\r\n//                 setCookie('accessToken', accessToken);\r\n//                 localStorage.setItem('refreshToken', refreshToken)\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export const userLogin: AppThunk = (email: string, password: string) => {\r\n//     return function(dispatch: any) {\r\n//         dispatch(setUserRequest());\r\n//         fetch(`${_apiUrl}/auth/login`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 \"email\": email,\r\n//                 \"password\": password\r\n//             })\r\n//         }).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(getUserInfoSuccess(response.user))\r\n//                 dispatch(resetEmail())\r\n//                 dispatch(resetPassword())\r\n\r\n//                 dispatch(setName(response.user.name))\r\n//                 dispatch(setEmail(response.user.email))\r\n\r\n//                 const accessToken = response.accessToken.split('Bearer ')[1];\r\n//                 const refreshToken = response.refreshToken;\r\n\r\n//                 setCookie('accessToken', accessToken);\r\n//                 localStorage.setItem('refreshToken', refreshToken)\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export const userLogout: AppThunk = (token: string) => {\r\n//     return function(dispatch: AppThunk) {\r\n//         dispatch(setUserRequest());\r\n//         fetch(`${_apiUrl}/auth/logout`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 \"token\": token\r\n//             })\r\n//         }).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(getUserInfoSuccess(null))\r\n//                 localStorage.removeItem('refreshToken')\r\n//                 deleteCookie('accessToken')\r\n//             } else {\r\n//                 dispatch(getUserInfoFailed())\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n","export const SET_MODAL_INNER_INGREDIENT_DETAILS: \"SET_MODAL_INNER_INGREDIENT_DETAILS\" = \"SET_MODAL_INNER_INGREDIENT_DETAILS\";\r\nexport const SET_MODAL_INNER_ORDER_DETAILS: \"SET_MODAL_INNER_ORDER_DETAILS\" = \"SET_MODAL_INNER_ORDER_DETAILS\";\r\n// export const SET_MODAL_OPEN: \"SET_MODAL_OPEN\" = \"SET_MODAL_OPEN\";\r\n// export const SET_MODAL_CLOSE: \"SET_MODAL_CLOSE\" = \"SET_MODAL_CLOSE\";\r\nexport const SET_CURRENT_INGREDIENT: \"SET_CURRENT_INGREDIENT\" = \"SET_CURRENT_INGREDIENT\";\r\nexport const SET_MODAL_INNER_ORDER_INFO: \"SET_MODAL_INNER_ORDER_INFO\" = \"SET_MODAL_INNER_ORDER_INFO\";\r\nexport const SET_CURRENT_ORDER_INFO: \"SET_CURRENT_ORDER_INFO\" = \"SET_CURRENT_ORDER_INFO\";","import { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, useHistory, useLocation } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from '../../hooks/hooks';\r\n\r\nimport WithAppHeader from '../../layouts/with-app-header/with-app-header';\r\nimport WithProfileNav from '../../layouts/with-profile-nav/with-profile-nav';\r\nimport ConstructorPage from '../../pages/constructor-page/constructor-page';\r\nimport LoginPage from '../../pages/login-page/login-page';\r\nimport RegisterPage from '../../pages/register-page/register-page';\r\nimport ForgotPasswordPage from '../../pages/forgot-password-page/forgot-password-page';\r\nimport ResetPasswordPage from '../../pages/reset-password-page/reset-password-page';\r\nimport ProfilePage from '../../pages/profile-page/profile-page';\r\nimport OrdersPage from '../../pages/orders-page/orders-page';\r\nimport FeedPage from '../../pages/feed-page/feed-page';\r\nimport IngredientItemPage from '../../pages/ingredient-item-page/ingredient-item-page';\r\nimport OrderDetailsPage from '../../pages/order-details-page/order-details-page';\r\nimport Modal from '../modal/modal';\r\nimport IngredientDetails from '../ingredient-details/ingredient-details';\r\nimport OrderDetails from '../order-details/order-details';\r\nimport OrderInfo from '../order-info/order-info';\r\nimport { ProtectedRoute } from '../../layouts/protected-route/protected-route';\r\n\r\nimport { wsAllOrdersConnectionStart } from '../../services/actions/wsOrders/wsOrders';\r\n\r\nimport { getOrderRequest, orderReset} from '../../services/actions/order/order';\r\nimport { getUserInfoRequest } from '../../services/actions/user/user';\r\nimport { TIngredient, TOrder } from '../../services/types/data';\r\n\r\nimport { \r\n  setCurrentIngredient, \r\n  setModalInnerIngredientsDetails, \r\n  setModalInnerOrderDetails, \r\n  setModalInnerOrderInfo, \r\n  setCurrentOrderInfo \r\n} from '../../services/actions/modal/modal';\r\nimport OrderInfoPage from '../../pages/order-info-page/order-info-page';\r\nimport { getIngredientsRequest } from '../../services/actions/ingredients/ingredients';\r\n\r\nexport interface IAppLocation {\r\n  background?: {\r\n      key: string,\r\n      pathname: string,\r\n      search: string,\r\n      hash: string\r\n      state: IAppLocation\r\n  }\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const ModalSwitch = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const location = useLocation<IAppLocation>();\r\n\r\n    let background = \r\n      history.action === \"PUSH\" && location.state && location.state.background;\r\n\r\n    const { modalInner } = useSelector(store => ({\r\n      modalInner: store.modal.modalInner\r\n    }));\r\n\r\n    const modalInnerDetails = {\r\n      ingredientDetails: 'ingredientDetails',\r\n      orderDetails: 'orderDetails',\r\n      orderInfo: 'orderInfo'\r\n    }\r\n\r\n    const handleIngredientClick = (item: TIngredient): void => {\r\n      dispatch(setCurrentIngredient(item));\r\n      dispatch(setModalInnerIngredientsDetails())\r\n    }\r\n\r\n    const handleOrderClick = (propLocation: object): void => {\r\n      dispatch(setModalInnerOrderDetails())\r\n      history.push({ pathname: '/order-details/4321', state: { background: propLocation }  })\r\n\r\n      dispatch(getOrderRequest())\r\n    }\r\n\r\n    const handleOrderInfoClick = (order: TOrder, ingredientsArr: ReadonlyArray<TIngredient>): void => {\r\n      dispatch(setCurrentOrderInfo({ order, ingredientsArr}));\r\n      dispatch(setModalInnerOrderInfo(`#${order.number}`));\r\n    }\r\n\r\n    const closeModal = (): void => {\r\n      dispatch(orderReset());\r\n      history.goBack()\r\n    }\r\n\r\n    useEffect(() => {\r\n      dispatch(getIngredientsRequest())\r\n\r\n      if (localStorage.getItem('refreshToken')) {\r\n        dispatch(getUserInfoRequest());\r\n      }\r\n\r\n      dispatch(wsAllOrdersConnectionStart());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n\r\n      const closeModalByEscape = (e: KeyboardEvent ): void => {\r\n          if (e.key === \"Escape\") {\r\n              closeModal();\r\n          }\r\n      }\r\n\r\n      document.addEventListener('keydown', closeModalByEscape)\r\n\r\n      return () => {\r\n          document.removeEventListener('keydown', closeModalByEscape)\r\n      }\r\n      \r\n    }, [])\r\n    \r\n    return (\r\n          <>\r\n            <WithAppHeader>\r\n              <ConstructorPage\r\n                handleIngredientClick={handleIngredientClick}\r\n                handleOrderClick={handleOrderClick}\r\n              />\r\n            </WithAppHeader>\r\n            {/* {background && (\r\n              <Route path=\"/:type/:id\" >\r\n                <Modal closeModal={closeModal}>\r\n                  {modalInner?.type === modalInnerDetails.ingredientDetails && <IngredientDetails/>}\r\n                  {modalInner?.type === modalInnerDetails.orderDetails && <OrderDetails/>}\r\n                  {modalInner?.type === modalInnerDetails.orderInfo && <OrderInfo/>}\r\n                </Modal>\r\n              </Route>\r\n            )}\r\n            <Switch location={background || location} >\r\n              <Route path=\"/\" exact >\r\n                <WithAppHeader>\r\n                  <ConstructorPage\r\n                    handleIngredientClick={handleIngredientClick}\r\n                    handleOrderClick={handleOrderClick}\r\n                  />\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/ingredients/:id\" >\r\n                <WithAppHeader>\r\n                  <IngredientItemPage />\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/feed/:id\" >\r\n                <WithAppHeader>\r\n                  <OrderInfoPage />\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/order-details/:id\" >\r\n                <WithAppHeader>\r\n                  <OrderDetailsPage/>\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <ProtectedRoute path=\"/profile/orders/:id\">\r\n                <WithAppHeader>\r\n                  <OrderInfoPage />\r\n                </WithAppHeader>\r\n              </ProtectedRoute>\r\n\r\n              <Route path=\"/login\" >\r\n                <WithAppHeader>\r\n                  <LoginPage/>\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/register\" >\r\n                <WithAppHeader>\r\n                  <RegisterPage/>\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/feed\" exact >\r\n                <WithAppHeader>\r\n                  <FeedPage handleOrderInfoClick={handleOrderInfoClick} />\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <ProtectedRoute path=\"/profile\" exact>\r\n                <WithAppHeader>\r\n                  <WithProfileNav>\r\n                    <ProfilePage/>\r\n                  </WithProfileNav>\r\n                </WithAppHeader>\r\n              </ProtectedRoute>\r\n\r\n              <ProtectedRoute path=\"/profile/orders\">\r\n                <WithAppHeader>\r\n                  <WithProfileNav>\r\n                    <OrdersPage handleOrderInfoClick={handleOrderInfoClick} />\r\n                  </WithProfileNav>\r\n                </WithAppHeader>\r\n              </ProtectedRoute>\r\n\r\n              <Route path=\"/forgot-password\" >\r\n                <WithAppHeader>\r\n                  <ForgotPasswordPage/>\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n              <Route path=\"/reset-password\" >\r\n                <WithAppHeader>\r\n                  <ResetPasswordPage/>\r\n                </WithAppHeader>\r\n              </Route>\r\n\r\n            </Switch> */}\r\n          </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <ModalSwitch />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import {\r\n    WS_ALL_ORDERS_CONNECTION_SUCCESS,\r\n    WS_ALL_ORDERS_CONNECTION_ERROR,\r\n    WS_ALL_ORDERS_CONNECTION_CLOSED ,\r\n    WS_ALL_ORDERS_GET_MESSAGE,\r\n    WS_ALL_ORDERS_CONNECTION_START,\r\n    WS_USER_ORDERS_CONNECTION_SUCCESS,\r\n    WS_USER_ORDERS_CONNECTION_ERROR,\r\n    WS_USER_ORDERS_CONNECTION_CLOSED,\r\n    WS_USER_ORDERS_GET_MESSAGE,\r\n    WS_USER_ORDERS_CONNECTION_START\r\n} from '../../constants/wsOrders';\r\n\r\nimport { TWsOrders } from '../../types/data';\r\n\r\nexport interface IWsAllOrdersConnectionSuccessAction {\r\n    readonly type: typeof WS_ALL_ORDERS_CONNECTION_SUCCESS;\r\n}\r\nexport interface IWsAllOrdersConnectionErrorAction {\r\n    readonly type: typeof WS_ALL_ORDERS_CONNECTION_ERROR;\r\n}\r\nexport interface IWsAllOrdersConnectionClosedAction {\r\n    readonly type: typeof WS_ALL_ORDERS_CONNECTION_CLOSED;\r\n}\r\nexport interface IWsAllOrdersGetMessageAction {\r\n    readonly type: typeof WS_ALL_ORDERS_GET_MESSAGE;\r\n    payload: TWsOrders\r\n}\r\nexport interface IWsAllOrdersConnectionStartAction {\r\n    readonly type: typeof WS_ALL_ORDERS_CONNECTION_START;\r\n}\r\nexport interface IWsUserOrdersConnectionSuccessAction {\r\n    readonly type: typeof WS_USER_ORDERS_CONNECTION_SUCCESS;\r\n}\r\nexport interface IWsUserOrdersConnectionErrorAction {\r\n    readonly type: typeof WS_USER_ORDERS_CONNECTION_ERROR;\r\n}\r\nexport interface IWsUserOrdersConnectionClosedAction {\r\n    readonly type: typeof WS_USER_ORDERS_CONNECTION_CLOSED;\r\n}\r\nexport interface IWsUserOrdersGetMessageAction {\r\n    readonly type: typeof WS_USER_ORDERS_GET_MESSAGE;\r\n    payload: TWsOrders\r\n}\r\nexport interface IWsUserOrdersConnectionStartAction {\r\n    readonly type: typeof WS_USER_ORDERS_CONNECTION_START;\r\n}\r\n\r\nexport type TWsOrdersActions = \r\n    | IWsAllOrdersConnectionSuccessAction\r\n    | IWsAllOrdersConnectionErrorAction\r\n    | IWsAllOrdersConnectionClosedAction\r\n    | IWsAllOrdersGetMessageAction\r\n    | IWsAllOrdersConnectionStartAction\r\n    | IWsUserOrdersConnectionSuccessAction\r\n    | IWsUserOrdersConnectionErrorAction\r\n    | IWsUserOrdersConnectionClosedAction\r\n    | IWsUserOrdersGetMessageAction\r\n    | IWsUserOrdersConnectionStartAction\r\n;\r\n\r\nexport const wsAllOrdersConnectionSuccess = (): IWsAllOrdersConnectionSuccessAction => ({\r\n    type: WS_ALL_ORDERS_CONNECTION_SUCCESS\r\n})\r\nexport const wsAllOrdersConnectionError = (): IWsAllOrdersConnectionErrorAction => ({\r\n    type: WS_ALL_ORDERS_CONNECTION_ERROR\r\n})\r\nexport const wsAllOrdersConnectionClosed = (): IWsAllOrdersConnectionClosedAction => ({\r\n    type: WS_ALL_ORDERS_CONNECTION_CLOSED\r\n})\r\nexport const wsAllOrdersGetMessage = (orders: TWsOrders): IWsAllOrdersGetMessageAction => ({\r\n    type: WS_ALL_ORDERS_GET_MESSAGE,\r\n    payload: orders\r\n})\r\nexport const wsAllOrdersConnectionStart = (): IWsAllOrdersConnectionStartAction => ({\r\n    type: WS_ALL_ORDERS_CONNECTION_START\r\n})\r\nexport const wsUserOrdersConnectionSuccess = (): IWsUserOrdersConnectionSuccessAction => ({\r\n    type: WS_USER_ORDERS_CONNECTION_SUCCESS\r\n})\r\nexport const wsUserOrdersConnectionError = (): IWsUserOrdersConnectionErrorAction => ({\r\n    type: WS_USER_ORDERS_CONNECTION_ERROR\r\n})\r\nexport const wsUserOrdersConnectionClosed = (): IWsUserOrdersConnectionClosedAction => ({\r\n    type: WS_USER_ORDERS_CONNECTION_CLOSED\r\n})\r\nexport const wsUserOrdersGetMessage = (orders: TWsOrders): IWsUserOrdersGetMessageAction => ({\r\n    type: WS_USER_ORDERS_GET_MESSAGE,\r\n    payload: orders\r\n})\r\nexport const wsUserOrdersConnectionStart = (): IWsUserOrdersConnectionStartAction => ({\r\n    type: WS_USER_ORDERS_CONNECTION_START\r\n})","import {\r\n    SET_MODAL_INNER_INGREDIENT_DETAILS,\r\n    SET_MODAL_INNER_ORDER_DETAILS,\r\n    SET_CURRENT_INGREDIENT,\r\n    SET_MODAL_INNER_ORDER_INFO,\r\n    SET_CURRENT_ORDER_INFO\r\n} from '../../constants/modal';\r\n\r\nimport { TIngredient, TOrderInfo } from '../../types/data';\r\n\r\nexport interface ISetModalInnerIngredientsDetailsAction {\r\n    readonly type: typeof SET_MODAL_INNER_INGREDIENT_DETAILS;\r\n}\r\nexport interface ISetModalInnerOrderDetailsAction {\r\n    readonly type: typeof SET_MODAL_INNER_ORDER_DETAILS;\r\n}\r\nexport interface ISetCurrentIngredientAction {\r\n    readonly type: typeof SET_CURRENT_INGREDIENT;\r\n    payload: TIngredient\r\n}\r\nexport interface ISetModalInnerOrderInfoAction {\r\n    readonly type: typeof SET_MODAL_INNER_ORDER_INFO;\r\n    payload: string;\r\n}\r\nexport interface ISetCurrentOrderInfoAction {\r\n    readonly type: typeof SET_CURRENT_ORDER_INFO;\r\n    payload: TOrderInfo\r\n}\r\n\r\nexport type TModalActions = \r\n    | ISetModalInnerIngredientsDetailsAction\r\n    | ISetModalInnerOrderDetailsAction\r\n    | ISetCurrentIngredientAction\r\n    | ISetModalInnerOrderInfoAction\r\n    | ISetCurrentOrderInfoAction\r\n;\r\n\r\nexport const setModalInnerIngredientsDetails = (): ISetModalInnerIngredientsDetailsAction => ({\r\n    type: SET_MODAL_INNER_INGREDIENT_DETAILS\r\n})\r\nexport const setModalInnerOrderDetails = (): ISetModalInnerOrderDetailsAction => ({\r\n    type: SET_MODAL_INNER_ORDER_DETAILS\r\n})\r\nexport const setModalInnerOrderInfo = (orderNumber: string): ISetModalInnerOrderInfoAction => ({\r\n    type: SET_MODAL_INNER_ORDER_INFO,\r\n    payload: orderNumber\r\n})\r\nexport const setCurrentIngredient = (ingredient: TIngredient): ISetCurrentIngredientAction => ({\r\n    type: SET_CURRENT_INGREDIENT,\r\n    payload: ingredient\r\n})\r\nexport const setCurrentOrderInfo = (order: TOrderInfo): ISetCurrentOrderInfoAction => ({\r\n    type: SET_CURRENT_ORDER_INFO,\r\n    payload: order\r\n})\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { TIngredient, TIngredientConstructor } from '../../types/data';\r\nimport { TIngredientsActions } from '../../actions/ingredients/ingredients';\r\n\r\nimport {\r\n    GET_INGREDIENTS_REQUEST,\r\n    GET_INGREDIENTS_SUCCESS, \r\n    GET_INGREDIENTS_FAILED,\r\n    ADD_INGREDIENT_TO_CONSTRUCTOR,\r\n    DELETE_INGREDIENT_FROM_CONSTRUCTOR,\r\n    ADD_BUN_TO_CONSTRUCTOR,\r\n    MOVE_INGREDIENT_IN_CONSTRUCTOR,\r\n    RESET_CONSTRUCTOR\r\n} from '../../constants/ingredients';\r\n\r\ntype TIngredientState = {\r\n    ingredients: null | ReadonlyArray<TIngredient>;\r\n    ingredientsRequest: boolean;\r\n    ingredientsFiled: boolean;\r\n\r\n    constructorIngredients: Array<TIngredientConstructor>,\r\n    constructorBun: null | TIngredient\r\n}\r\n\r\nexport const initialState: TIngredientState = {\r\n    ingredients: null,\r\n    ingredientsRequest: false,\r\n    ingredientsFiled: false,\r\n\r\n    constructorIngredients: [],\r\n    constructorBun: null\r\n}\r\n\r\nexport default function ingredientsReducer(state = initialState, action: TIngredientsActions): TIngredientState {\r\n    switch(action.type) {\r\n        case GET_INGREDIENTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                ingredientsRequest: true\r\n            }\r\n        case GET_INGREDIENTS_FAILED:\r\n            return {\r\n                ...state,\r\n                ingredientsFiled: true,\r\n                ingredientsRequest: false\r\n            }\r\n        case GET_INGREDIENTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ingredients: action.payload,\r\n                ingredientsFiled: false,\r\n                ingredientsRequest: false\r\n            }\r\n        case ADD_INGREDIENT_TO_CONSTRUCTOR:\r\n            return {\r\n                ...state,\r\n                constructorIngredients: [...state.constructorIngredients, action.payload]\r\n            }\r\n        case DELETE_INGREDIENT_FROM_CONSTRUCTOR:\r\n            return {\r\n                ...state,\r\n                constructorIngredients: state.constructorIngredients.filter(item => item.drag_id !== action.payload.drag_id)\r\n            }\r\n        case ADD_BUN_TO_CONSTRUCTOR:\r\n            return {\r\n                ...state,\r\n                constructorBun: action.payload\r\n            }\r\n        case MOVE_INGREDIENT_IN_CONSTRUCTOR:\r\n            const arr = [...state.constructorIngredients];\r\n\t\t\tconst dragItem = arr[action.payload.dragIndex];\r\n\t\t\tconst hoverItem = arr[action.payload.hoverIndex];\r\n\t\t\tarr[action.payload.hoverIndex] = dragItem;\r\n\t\t\tarr[action.payload.dragIndex] = hoverItem;\r\n            \r\n            return {\r\n                ...state,\r\n                constructorIngredients: arr\r\n            }\r\n        case RESET_CONSTRUCTOR:\r\n            return {\r\n                ...state,\r\n                constructorIngredients: [],\r\n                constructorBun: null\r\n            }\r\n        default: {\r\n            return state\r\n        }\r\n            \r\n    }\r\n}","import { \r\n    SET_MODAL_INNER_INGREDIENT_DETAILS,\r\n    SET_MODAL_INNER_ORDER_DETAILS,\r\n    SET_MODAL_INNER_ORDER_INFO,\r\n    SET_CURRENT_INGREDIENT,\r\n    SET_CURRENT_ORDER_INFO\r\n} from '../../constants/modal';\r\n\r\nimport { TIngredientConstructor, TIngredient, TModalInner, TOrderInfo } from '../../types/data'\r\nimport { TModalActions } from '../../actions/modal/modal';\r\n\r\ntype TModalState = {\r\n    ingredientsConstructor: null | Array<TIngredientConstructor>,\r\n    currentIngredient: null | TIngredient,\r\n    currentOrderInfo: null | TOrderInfo,\r\n    modalInner: null | TModalInner\r\n}\r\n\r\nexport const initialState: TModalState = {\r\n    ingredientsConstructor: null,\r\n    currentIngredient: null,\r\n    currentOrderInfo: null,\r\n    modalInner: null\r\n}\r\n\r\nexport default function modalReducer(state = initialState, action: TModalActions): TModalState {\r\n    switch(action.type) {\r\n        case SET_CURRENT_INGREDIENT:\r\n            return {\r\n                ...state,\r\n                currentIngredient: action.payload\r\n            }\r\n        case SET_CURRENT_ORDER_INFO:\r\n            return {\r\n                ...state,\r\n                currentOrderInfo: action.payload\r\n            }\r\n        case SET_MODAL_INNER_INGREDIENT_DETAILS:\r\n            return {\r\n                ...state,\r\n                modalInner: {\r\n                    title: 'Детали ингредиента',\r\n                    type: \"ingredientDetails\"\r\n                }\r\n            }\r\n        case SET_MODAL_INNER_ORDER_DETAILS:\r\n            return {\r\n                ...state,\r\n                modalInner: {\r\n                    title: null,\r\n                    type: 'orderDetails'\r\n                }\r\n            }\r\n        case SET_MODAL_INNER_ORDER_INFO:\r\n            return {\r\n                ...state,\r\n                modalInner: {\r\n                    title: action.payload,\r\n                    type: 'orderInfo'\r\n                }\r\n            }\r\n        default: {\r\n            return state\r\n        }\r\n            \r\n    }\r\n}","import { \r\n    GET_ORDER_REQUEST,\r\n    GET_ORDER_SUCCESS,\r\n    GET_ORDER_FAILED,\r\n    ORDER_RESET\r\n} from '../../constants/order';\r\n\r\nimport { TOrderActions } from '../../actions/order/order';\r\nimport { TOrder } from '../../types/data';\r\n\r\ntype TOrderState = {\r\n    order: null | TOrder;\r\n    orderRequest: boolean;\r\n    orderFiled: boolean;\r\n    // orderInfo: null | TOrder\r\n}\r\n\r\nexport const initialState: TOrderState = {\r\n    order: null,\r\n    orderRequest: false,\r\n    orderFiled: false,\r\n    // orderInfo: null\r\n}\r\n\r\nexport default function orderReducer(state = initialState, action: TOrderActions): TOrderState {\r\n    switch(action.type) {\r\n        case GET_ORDER_REQUEST:\r\n            return {\r\n                ...state,\r\n                orderRequest: true\r\n            }\r\n        case GET_ORDER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                orderRequest: false,\r\n                order: action.payload\r\n            }\r\n        case GET_ORDER_FAILED:\r\n            return {\r\n                ...state,\r\n                orderRequest: false,\r\n                orderFiled: true\r\n            }\r\n        case ORDER_RESET:\r\n            return {\r\n                ...state,\r\n                order: null\r\n            }\r\n        default: {\r\n            return state\r\n        }\r\n            \r\n    }\r\n}","\r\nexport const SEND_EMAIL_REQUEST: \"SEND_EMAIL_REQUEST\" = \"SEND_EMAIL_REQUEST\";\r\nexport const SEND_EMAIL_SUCCESS: \"SEND_EMAIL_SUCCESS\" = \"SEND_EMAIL_SUCCESS\";\r\nexport const SEND_EMAIL_FAILED: \"SEND_EMAIL_FAILED\" = \"SEND_EMAIL_FAILED\";\r\n\r\nexport const RESET_PASSWORD_REQUEST: \"RESET_PASSWORD_REQUEST\" = \"RESET_PASSWORD_REQUEST\";\r\nexport const RESET_PASSWORD_SUCCESS: \"RESET_PASSWORD_SUCCESS\" = \"RESET_PASSWORD_SUCCESS\";\r\nexport const RESET_PASSWORD_FAILED: \"RESET_PASSWORD_FAILED\" = \"RESET_PASSWORD_FAILED\";\r\n\r\nexport const SET_EMAILCODE: \"SET_EMAILCODE\" = \"SET_EMAILCODE\";\r\nexport const RESET_EMAILCODE: \"RESET_EMAILCODE\" = \"RESET_EMAILCODE\";\r\n\r\nexport const SET_USER_REQUEST: \"SET_USER_REQUEST\" = \"SET_USER_REQUEST\";\r\nexport const SET_USER_SUCCESS: \"SET_USER_SUCCESS\" = \"SET_USER_SUCCESS\";\r\nexport const SET_USER_FAILED: \"SET_USER_FAILED\" = \"SET_USER_FAILED\";\r\n\r\nexport const SET_EMAIL: \"SET_EMAIL\" = \"SET_EMAIL\";\r\nexport const RESET_EMAIL: \"RESET_EMAIL\" = \"RESET_EMAIL\";","import {\r\n    SEND_EMAIL_REQUEST,\r\n    SEND_EMAIL_SUCCESS,\r\n    SEND_EMAIL_FAILED,\r\n    RESET_PASSWORD_REQUEST,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAILED,\r\n    SET_EMAILCODE,\r\n    RESET_EMAILCODE\r\n} from '../../constants/reset-password';\r\n\r\nimport { TResetPasswordActions } from '../../actions/reset-password/reset-password';\r\nimport { TMessageResetEmail, TMessageResetPassword } from '../../types/data';\r\n\r\ntype TResetPasswordState = {\r\n    sendEmailSuccess: null | TMessageResetEmail;\r\n    sendEmailRequest: boolean;\r\n    sendEmailFailed: boolean;\r\n\r\n    resetPasswordRequest: boolean;\r\n    resetPasswordSuccess: null | TMessageResetPassword;\r\n    resetPasswordFailed: boolean;\r\n    \r\n    emailCode: string\r\n}\r\n\r\nexport const initialState: TResetPasswordState = {\r\n    sendEmailSuccess: null,\r\n    sendEmailRequest: false,\r\n    sendEmailFailed: false,\r\n\r\n    resetPasswordRequest: false,\r\n    resetPasswordSuccess: null,\r\n    resetPasswordFailed: false,\r\n    \r\n    emailCode: ''\r\n}\r\n\r\nexport default function resetPasswordReducer(state = initialState, action: TResetPasswordActions ): TResetPasswordState {\r\n    switch(action.type) {\r\n        case SEND_EMAIL_REQUEST:\r\n            return {\r\n                ...state,\r\n                sendEmailRequest: true\r\n            }\r\n        case SEND_EMAIL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                sendEmailSuccess: action.payload,\r\n                sendEmailRequest: false,\r\n                sendEmailFailed: false\r\n            }\r\n        case SEND_EMAIL_FAILED:\r\n            return {\r\n                ...state,\r\n                sendEmailFailed: true,\r\n                sendEmailRequest: false\r\n            }\r\n        case RESET_PASSWORD_REQUEST:\r\n            return {\r\n                ...state,\r\n                resetPasswordRequest: true\r\n            }\r\n        case RESET_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                resetPasswordRequest: false,\r\n                resetPasswordFailed: false,\r\n                resetPasswordSuccess: action.payload\r\n            }\r\n        case RESET_PASSWORD_FAILED:\r\n            return {\r\n                ...state,\r\n                resetPasswordRequest: false,\r\n                resetPasswordFailed: true\r\n            }\r\n        case SET_EMAILCODE:\r\n            return {\r\n                ...state,\r\n                emailCode: action.payload\r\n            }\r\n        case RESET_EMAILCODE:\r\n            return {\r\n                ...state,\r\n                emailCode: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    GET_USER_INFO_REQUEST,\r\n    GET_USER_INFO_SUCCESS,\r\n    GET_USER_INFO_FAILED,\r\n    SET_EMAIL,\r\n    RESET_EMAIL,\r\n    SET_PASSWORD,\r\n    RESET_PASSWORD,\r\n    SET_NAME,\r\n    RESET_NAME,\r\n} from '../../constants/user';\r\n\r\nimport { TUserActions } from '../../actions/user/user';\r\nimport { TUser } from '../../types/data';\r\n\r\ntype TUserState = {\r\n    userReguest: boolean;\r\n    userFailed: boolean;\r\n    user: null | TUser\r\n\r\n    name: string;\r\n    email: string;\r\n    password: string\r\n}\r\n\r\nexport const initialState : TUserState = {\r\n    userReguest: false,\r\n    userFailed: false,\r\n    user: null,\r\n\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n}\r\n\r\nexport default function userReducer(state = initialState, action: TUserActions): TUserState {\r\n    switch(action.type) {\r\n        case GET_USER_INFO_REQUEST:\r\n            return {\r\n                ...state,\r\n                userReguest: true\r\n            }\r\n        case GET_USER_INFO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                userReguest: false,\r\n                userFailed: false,\r\n                user: action.payload\r\n            }\r\n        case GET_USER_INFO_FAILED:\r\n            return {\r\n                ...state,\r\n                userReguest: false,\r\n                userFailed: true,\r\n                user: null,\r\n            }\r\n        case SET_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: action.payload\r\n            }\r\n        case RESET_EMAIL:\r\n            return {\r\n                ...state,\r\n                email: ''\r\n            }\r\n        case SET_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: action.payload\r\n            }\r\n        case RESET_PASSWORD:\r\n            return {\r\n                ...state,\r\n                password: ''\r\n            }\r\n        case SET_NAME: \r\n            return {\r\n                ...state,\r\n                name: action.payload\r\n            }\r\n        case RESET_NAME:\r\n            return {\r\n                ...state,\r\n                name: ''\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}","import {\r\n    WS_ALL_ORDERS_CONNECTION_SUCCESS, \r\n    WS_ALL_ORDERS_CONNECTION_ERROR,\r\n    WS_ALL_ORDERS_CONNECTION_CLOSED,\r\n    WS_ALL_ORDERS_GET_MESSAGE,\r\n    WS_USER_ORDERS_CONNECTION_SUCCESS, \r\n    WS_USER_ORDERS_CONNECTION_ERROR,\r\n    WS_USER_ORDERS_CONNECTION_CLOSED,\r\n    WS_USER_ORDERS_GET_MESSAGE,\r\n    WS_ALL_ORDERS_CONNECTION_START,\r\n    WS_USER_ORDERS_CONNECTION_START\r\n} from '../../constants/wsOrders';\r\nimport { TWsOrdersActions } from '../../actions/wsOrders/wsOrders';\r\nimport { TWsOrders } from '../../types/data';\r\n\r\ntype TWsOrdersState = {\r\n    wsAllOrdersConnect: boolean,\r\n    allOrders: TWsOrders | null,\r\n    wsUserOrdersConnect: boolean,\r\n    userOrders: TWsOrders | null\r\n};\r\n\r\nexport const initialState: TWsOrdersState = {\r\n    wsAllOrdersConnect: false,\r\n    allOrders: null,\r\n    wsUserOrdersConnect: false,\r\n    userOrders: null\r\n};\r\n  \r\nexport default function wsReducer(state = initialState, action: TWsOrdersActions): TWsOrdersState {\r\n    switch (action.type) {\r\n        case WS_ALL_ORDERS_CONNECTION_START:\r\n            return {\r\n                ...state,\r\n                wsAllOrdersConnect: true\r\n            };\r\n        case WS_USER_ORDERS_CONNECTION_START:\r\n            return {\r\n                ...state,\r\n                wsAllOrdersConnect: true\r\n            };\r\n        case WS_ALL_ORDERS_CONNECTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                wsAllOrdersConnect: true\r\n            };\r\n        case WS_ALL_ORDERS_CONNECTION_ERROR:\r\n            return {\r\n                ...state,\r\n                wsAllOrdersConnect: false\r\n            };\r\n        case WS_ALL_ORDERS_CONNECTION_CLOSED:\r\n            return {\r\n                ...state,\r\n                wsAllOrdersConnect: false\r\n            };\r\n        case WS_ALL_ORDERS_GET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                allOrders: action.payload\r\n            };\r\n        case WS_USER_ORDERS_CONNECTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                wsUserOrdersConnect: true\r\n            };\r\n        case WS_USER_ORDERS_CONNECTION_ERROR:\r\n            return {\r\n                ...state,\r\n                wsUserOrdersConnect: false\r\n            };\r\n        case WS_USER_ORDERS_CONNECTION_CLOSED:\r\n            return {\r\n                ...state,\r\n                wsUserOrdersConnect: false\r\n            };\r\n        case WS_USER_ORDERS_GET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                userOrders: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n  ","import { combineReducers } from 'redux';\r\n\r\nimport ingredientsReducer from './ingredients/ingredients';\r\nimport modalReducer from './modal/modal';\r\nimport orderReducer from './order/order';\r\nimport resetPasswordReducer from './reset-password/reset-password';\r\nimport userReducer from './user/user';\r\nimport wsReducer from './wsOrders/wsOrders';\r\n\r\n// import {\r\n//     wsAllOrdersConnectionSuccess, \r\n//     wsAllOrdersConnectionError,\r\n//     wsAllOrdersConnectionClosed,\r\n//     wsAllOrdersGetMessage,\r\n//     wsAllOrdersConnectionStart,\r\n//     wsUserOrdersConnectionSuccess, \r\n//     wsUserOrdersConnectionError,\r\n//     wsUserOrdersConnectionClosed,\r\n//     wsUserOrdersGetMessage,\r\n//     wsUserOrdersConnectionStart\r\n// } from '../actions/wsOrders';\r\n\r\nimport {\r\n    WS_ALL_ORDERS_CONNECTION_SUCCESS,\r\n    WS_ALL_ORDERS_CONNECTION_ERROR,\r\n    WS_ALL_ORDERS_CONNECTION_CLOSED ,\r\n    WS_ALL_ORDERS_GET_MESSAGE,\r\n    WS_ALL_ORDERS_CONNECTION_START,\r\n    WS_USER_ORDERS_CONNECTION_SUCCESS,\r\n    WS_USER_ORDERS_CONNECTION_ERROR,\r\n    WS_USER_ORDERS_CONNECTION_CLOSED,\r\n    WS_USER_ORDERS_GET_MESSAGE,\r\n    WS_USER_ORDERS_CONNECTION_START\r\n} from '../constants/wsOrders';\r\n\r\n/// Все заказы\r\nexport const wsAllOrdersActions = {\r\n    wsInit: WS_ALL_ORDERS_CONNECTION_START,\r\n    onOpen: WS_ALL_ORDERS_CONNECTION_SUCCESS,\r\n    onClose: WS_ALL_ORDERS_CONNECTION_CLOSED,\r\n    onError: WS_ALL_ORDERS_CONNECTION_ERROR,\r\n    onMessage: WS_ALL_ORDERS_GET_MESSAGE\r\n};\r\n\r\n/// Заказы юзера\r\nexport const wsUserOrdersActions = {\r\n    wsInit: WS_USER_ORDERS_CONNECTION_START,\r\n    onOpen: WS_USER_ORDERS_CONNECTION_SUCCESS,\r\n    onClose: WS_USER_ORDERS_CONNECTION_CLOSED,\r\n    onError: WS_USER_ORDERS_CONNECTION_ERROR,\r\n    onMessage: WS_USER_ORDERS_GET_MESSAGE\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n    modal: modalReducer,\r\n    order: orderReducer,\r\n    ingredients: ingredientsReducer,\r\n    resetPassword: resetPasswordReducer,\r\n    user: userReducer,\r\n    wsOrders: wsReducer\r\n})\r\n","export function setCookie(name, value, props) {\r\n    props = props || {};\r\n    let exp = props.expires;\r\n    if (typeof exp == 'number' && exp) {\r\n        const d = new Date();\r\n        d.setTime(d.getTime() + exp * 1000);\r\n        exp = props.expires = d;\r\n    }\r\n    if (exp && exp.toUTCString) {\r\n        props.expires = exp.toUTCString();\r\n    }\r\n    value = encodeURIComponent(value);\r\n    let updatedCookie = name + '=' + value;\r\n    for (const propName in props) {\r\n        updatedCookie += '; ' + propName;\r\n        const propValue = props[propName];\r\n        if (propValue !== true) {\r\n            updatedCookie += '=' + propValue;\r\n        }\r\n    }\r\n    document.cookie = `${updatedCookie}; path=/;`;\r\n} \r\n\r\nexport function getCookie(name) {\r\n    const matches = document.cookie.match(\r\n        new RegExp('(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)')\r\n    );\r\n    return matches ? decodeURIComponent(matches[1]) : undefined;\r\n}\r\n\r\nexport function deleteCookie(name) {\r\n    setCookie(name, null, { expires: -1 });\r\n} \r\n","import { getCookie } from \"../../utils/cookies\";\r\nimport { RootState } from \"../types\";\r\nimport { Middleware } from \"redux\";\r\n\r\nexport type WsActions = {\r\n    wsInit: string\r\n    onOpen: string\r\n    onClose: string\r\n    onError: string\r\n    onMessage: string\r\n}\r\n\r\nexport const createSocketMiddlware = (token: string | null, wsActions: WsActions ): Middleware<{}, RootState> => {\r\n    const socketMiddleware: Middleware<{}, RootState> = (store) => {\r\n        let socket: WebSocket | null = null;\r\n\r\n        return next => action => {\r\n            const { dispatch } = store;\r\n            const { type } = action;\r\n            const { wsInit, onOpen, onClose, onError, onMessage } = wsActions;\r\n            \r\n            if (type === wsInit) {\r\n                if (token) {\r\n                    socket = new WebSocket(`wss://norma.nomoreparties.space/orders?token=${getCookie('accessToken')}`);\r\n                } else {\r\n                    socket = new WebSocket(\"wss://norma.nomoreparties.space/orders/all\");\r\n                }\r\n            }\r\n            if (socket) {\r\n                socket.onopen = event => {\r\n                    dispatch({ type: onOpen, payload: event });\r\n                };\r\n\r\n                socket.onerror = event => {\r\n                    dispatch({ type: onError, payload: event });\r\n                };\r\n\r\n                socket.onmessage = event => {\r\n                    const { data } = event;\r\n                    const parsedData = JSON.parse(data);\r\n                    const { success, ...restParsedData } = parsedData;\r\n\r\n                    dispatch({ type: onMessage, payload: restParsedData });\r\n                };\r\n\r\n                socket.onclose = event => {\r\n                    dispatch({ type: onClose, payload: event });\r\n                };\r\n            }\r\n        next(action);\r\n        };\r\n    };\r\n\r\n    return socketMiddleware;\r\n}","export const _apiUrl: 'https://norma.nomoreparties.space/api' = 'https://norma.nomoreparties.space/api';\r\n\r\nexport const SET_PASSWORD: \"SET_PASSWORD\" = \"SET_PASSWORD\";\r\nexport const RESET_PASSWORD: \"RESET_PASSWORD\" = \"RESET_PASSWORD\";\r\n\r\nexport const SET_NAME: \"SET_NAME\" = \"SET_NAME\";\r\nexport const RESET_NAME: \"RESET_NAME\" = \"RESET_NAME\"\r\n\r\nexport const USER_INFO: \"USER_INFO\" = \"USER_INFO\";\r\n\r\nexport const GET_USER_ORDERS_SUCCESS: \"GET_ALL_ORDERS_SUCCESS\" = \"GET_ALL_ORDERS_SUCCESS\";\r\nexport const GET_USER_ORDERS_FAILED: \"GET_ALL_ORDERS_FAILED\" = \"GET_ALL_ORDERS_FAILED\";","export const checkResponse = (response) => {\r\n    return response.ok \r\n        ? response.json().then(response => {\r\n                if (response?.success) {\r\n                    return response;\r\n                } else {\r\n                    return Promise.reject(response);\r\n                }\r\n            }) \r\n        : response.json().then((error) => Promise.reject(error));\r\n}","import { call, takeEvery, put } from 'redux-saga/effects';\r\nimport { SagaIterator } from \"@redux-saga/types\";\r\n\r\nimport { GET_INGREDIENTS_REQUEST } from '../constants/ingredients';\r\nimport { getIngredientsFailed, getIngredientsSuccess } from '../actions/ingredients/ingredients';\r\nimport { _apiUrl } from '../constants';\r\nimport { checkResponse } from '../../utils/apiHelper';\r\n\r\nconst getIngredientsFetch = () => {\r\n    return fetch(`${_apiUrl}/ingredients`).then(checkResponse)\r\n}\r\n\r\nexport function* getIngredients(): SagaIterator {\r\n    try {\r\n        const response = yield call(getIngredientsFetch);\r\n        yield put(getIngredientsSuccess(response.data));\r\n    } catch (e) {\r\n        yield put(getIngredientsFailed());\r\n    }\r\n}\r\n\r\nexport default function* ingredientsSaga() {\r\n    yield takeEvery(GET_INGREDIENTS_REQUEST, getIngredients)\r\n}","import { call, select, takeEvery, put } from \"redux-saga/effects\";\r\nimport { SagaIterator } from \"@redux-saga/types\";\r\n\r\nimport * as userActions from '../actions/user/user';\r\nimport { setCookie, deleteCookie, getCookie } from \"../../utils/cookies\";\r\nimport { _apiUrl } from \"../constants\";\r\nimport { GET_USER_INFO_REQUEST, UPDATE_USER_INFO_REQUEST, USER_LOGIN_REQUEST, USER_LOGOUT_REQUEST, USER_REGISTER_REQUEST } from \"../constants/user\";\r\nimport { checkResponse } from \"../../utils/apiHelper\";\r\n\r\nexport function userLoginFetch(email: string, password: string) {\r\n    return fetch(`${_apiUrl}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n            \"email\": email,\r\n            \"password\": password\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function userLogoutFetch() {\r\n    return fetch(`${_apiUrl}/auth/logout`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n            \"token\": localStorage.getItem('refreshToken')\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function getUserInfoFetch() {\r\n    return fetch(`${_apiUrl}/auth/user`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=utf-8',\r\n             Authorization: 'Bearer ' + getCookie('accessToken')\r\n        }\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function updateAccessTokenFetch() {\r\n    return fetch(`${_apiUrl}/auth/token`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n            token: localStorage.getItem('refreshToken')\r\n        })\r\n    }).then((response) => {\r\n        return response.json();\r\n    }).catch(error => {\r\n        console.log(error);\r\n    })\r\n}\r\n\r\nexport function updateUserInfoFetch(email: string, name: string, password: string) {\r\n    return fetch(`${_apiUrl}/auth/user`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=utf-8',\r\n            Authorization: 'Bearer ' + getCookie('accessToken')\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            name,\r\n            password\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function userRegisterFetch(name: string, email: string, password: string) {\r\n    return fetch(`${_apiUrl}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n            name,\r\n            email,\r\n            password\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function* userLogin(): SagaIterator {\r\n    try {\r\n        const { email, password } = yield select((store) => ({\r\n            email: store.user.email,\r\n            password: store.user.password,\r\n        }));\r\n\r\n        const response = yield call(userLoginFetch, email, password);\r\n\r\n        yield put(userActions.getUserInfoSuccess(response.user))\r\n        yield put(userActions.resetEmail())\r\n        yield put(userActions.resetPassword())\r\n\r\n        yield put(userActions.setName(response.user.name))\r\n        yield put(userActions.setEmail(response.user.email))\r\n\r\n        const accessToken = response.accessToken.split('Bearer ')[1];\r\n        const refreshToken = response.refreshToken;\r\n\r\n        setCookie('accessToken', accessToken);\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n    } catch(error) {\r\n        yield put(userActions.userLoginFailed())\r\n    }\r\n}\r\n\r\nexport function* userLogout(): SagaIterator {\r\n    try {\r\n        const response = yield call(userLogoutFetch);\r\n        \r\n        localStorage.removeItem('refreshToken')\r\n        deleteCookie('accessToken')\r\n        yield put(userActions.getUserInfoSuccess(null));\r\n    } catch(error) {\r\n        yield put(userActions.userLogoutFailed())\r\n    }\r\n}\r\n\r\nexport function* getUserInfo(): SagaIterator {\r\n    try {\r\n        const response = yield call(getUserInfoFetch);\r\n\r\n        yield put(userActions.getUserInfoSuccess(response.user))\r\n        yield put(userActions.setName(response.user.name))\r\n        yield put(userActions.setEmail(response.user.email))\r\n    } catch(error: any) {\r\n        if (error?.message === 'jwt expired') {\r\n            const data = yield call(updateAccessTokenFetch);\r\n            \r\n            if (data?.success) {\r\n                const accessToken = data.accessToken.split('Bearer ')[1];\r\n                const refreshToken = data.refreshToken;\r\n                \r\n                setCookie('accessToken', accessToken);\r\n                localStorage.setItem('refreshToken', refreshToken)\r\n                \r\n                yield put(userActions.getUserInfoRequest())\r\n            } else {\r\n                yield put(userActions.getUserInfoFailed())\r\n            }\r\n            return\r\n        }\r\n        yield put(userActions.getUserInfoFailed())\r\n    }\r\n}\r\n\r\nexport function* updateUserInfo(): SagaIterator {\r\n    try {\r\n        const { email, name, password } = yield select(store => ({\r\n            email: store.user.email,\r\n            name: store.user.name,\r\n            password: store.user.password\r\n        }))\r\n\r\n        const response = yield call(updateUserInfoFetch, email, name, password)\r\n\r\n        yield put(userActions.getUserInfoSuccess(response.user))\r\n        yield put(userActions.setName(response.user.name))\r\n        yield put(userActions.setEmail(response.user.email))\r\n    } catch(error: any) {\r\n        if (error?.message === 'jwt expired') {\r\n            const data = yield call(updateAccessTokenFetch);\r\n            \r\n            if (data?.success) {\r\n                const accessToken = data.accessToken.split('Bearer ')[1];\r\n                const refreshToken = data.refreshToken;\r\n                \r\n                setCookie('accessToken', accessToken);\r\n                localStorage.setItem('refreshToken', refreshToken)\r\n                \r\n                yield put(userActions.updateUserInfoRequest())\r\n            } else {\r\n                yield put(userActions.updateUserInfoFailed())\r\n            }\r\n            return\r\n        }\r\n        yield put(userActions.updateUserInfoFailed())\r\n    }\r\n}\r\n\r\nexport function* userRegister(): SagaIterator {\r\n    try {\r\n        const { email, name, password } = yield select(store => ({\r\n            email: store.user.email,\r\n            name: store.user.name,\r\n            password: store.user.password\r\n        }))\r\n\r\n        const response = yield call(userRegisterFetch, email, name, password)\r\n\r\n        yield put(userActions.getUserInfoSuccess(response.user))\r\n        yield put(userActions.resetEmail())\r\n        yield put(userActions.resetPassword())\r\n        yield put(userActions.resetName())\r\n\r\n        const accessToken = response.accessToken.split('Bearer ')[1];\r\n        const refreshToken = response.refreshToken;\r\n\r\n        setCookie('accessToken', accessToken);\r\n        localStorage.setItem('refreshToken', refreshToken)\r\n    } catch(error) {\r\n        yield put(userActions.userRegisterFailed())\r\n    }\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield takeEvery(USER_LOGIN_REQUEST, userLogin);\r\n    yield takeEvery(USER_LOGOUT_REQUEST, userLogout);\r\n    yield takeEvery(GET_USER_INFO_REQUEST, getUserInfo);\r\n    yield takeEvery(UPDATE_USER_INFO_REQUEST, updateUserInfo);\r\n    yield takeEvery(USER_REGISTER_REQUEST, userRegister);\r\n}","import { select, takeEvery, call, put } from \"redux-saga/effects\";\r\nimport { SagaIterator } from \"@redux-saga/types\";\r\n\r\nimport { checkResponse } from \"../../utils/apiHelper\";\r\nimport { GET_ORDER_REQUEST } from \"../constants/order\";\r\nimport { TIngredient } from \"../types/data\";\r\nimport { getCookie, setCookie } from \"../../utils/cookies\";\r\nimport { _apiUrl } from \"../constants\";\r\nimport { getOrderFailed, getOrderRequest, getOrderSuccess } from \"../actions/order/order\";\r\nimport { resetConstructor } from \"../actions/ingredients/ingredients\";\r\nimport { updateAccessTokenFetch } from \"./user\";\r\n\r\nexport function makeOrderFetch(ingredientsIdArr: Array<string>) {\r\n    return fetch(`${_apiUrl}/orders`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n          'Authorization': 'Bearer ' + getCookie('accessToken')\r\n        },\r\n        body: JSON.stringify({\r\n          \"ingredients\": ingredientsIdArr\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function* makeOrder(): SagaIterator {\r\n    try {\r\n        const { constructorIngredients, constructorBun } = yield select(store => ({\r\n            constructorIngredients: store.ingredients.constructorIngredients,\r\n            constructorBun: store.ingredients.constructorBun,\r\n        }));\r\n        const finalIngredients = constructorIngredients.map((ingredient: TIngredient): string => ingredient._id)\r\n        const finalIngredientsArg = [...finalIngredients, constructorBun._id, constructorBun._id];\r\n\r\n        const response = yield call(makeOrderFetch, finalIngredientsArg);\r\n\r\n        yield put(getOrderSuccess(response.order));\r\n        yield put(resetConstructor());\r\n\r\n    } catch(error: any) {\r\n        if (error?.message === 'jwt expired') {\r\n            const data = yield call(updateAccessTokenFetch);\r\n            if (data?.success) {\r\n                const accessToken = data.accessToken.split('Bearer ')[1];\r\n                const refreshToken = data.refreshToken;\r\n                \r\n                setCookie('accessToken', accessToken);\r\n                localStorage.setItem('refreshToken', refreshToken)\r\n                \r\n                yield put(getOrderRequest())\r\n            } else {\r\n                yield put(getOrderFailed())\r\n            }\r\n            return\r\n        }\r\n        yield put(getOrderFailed())\r\n    }\r\n}\r\n\r\nexport default function* orderSaga() {\r\n    yield takeEvery(GET_ORDER_REQUEST, makeOrder)\r\n}","import { resetPassword as resetPasswordAction, resetEmail } from '../user/user';\r\n\r\nimport {\r\n    SEND_EMAIL_REQUEST,\r\n    SEND_EMAIL_SUCCESS,\r\n    SEND_EMAIL_FAILED,\r\n    RESET_PASSWORD_REQUEST,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAILED ,\r\n    SET_EMAILCODE,\r\n    RESET_EMAILCODE\r\n} from '../../constants/reset-password';\r\n\r\nimport { AppDispatch, AppThunk } from '../../types';\r\nimport { TMessageResetEmail, TMessageResetPassword } from '../../types/data';\r\n\r\nconst _apiUrl = 'https://norma.nomoreparties.space/api';\r\n\r\nexport interface ISendEmailRequestAction {\r\n    readonly type: typeof SEND_EMAIL_REQUEST;\r\n}\r\nexport interface ISendEmailSuccessAction {\r\n    readonly type: typeof SEND_EMAIL_SUCCESS;\r\n    payload: TMessageResetEmail\r\n}\r\nexport interface ISendEmailFailedAction {\r\n    readonly type: typeof SEND_EMAIL_FAILED;\r\n}\r\nexport interface IResetPasswordRequestAction {\r\n    readonly type: typeof RESET_PASSWORD_REQUEST;\r\n}\r\nexport interface IResetPasswordSuccessAction {\r\n    readonly type: typeof RESET_PASSWORD_SUCCESS;\r\n    payload: TMessageResetPassword\r\n}\r\nexport interface IResetPasswordFailedAction {\r\n    readonly type: typeof RESET_PASSWORD_FAILED;\r\n}\r\nexport interface ISetEmailCodeAction {\r\n    readonly type: typeof SET_EMAILCODE;\r\n    payload: string\r\n}\r\nexport interface IResetEmailCodeAction {\r\n    readonly type: typeof RESET_EMAILCODE;\r\n}\r\n\r\nexport type TResetPasswordActions = \r\n    | ISendEmailRequestAction\r\n    | ISendEmailSuccessAction\r\n    | ISendEmailFailedAction\r\n    | IResetPasswordRequestAction\r\n    | IResetPasswordSuccessAction\r\n    | IResetPasswordFailedAction\r\n    | ISetEmailCodeAction\r\n    | IResetEmailCodeAction\r\n;\r\n\r\nexport const sendEmailRequest = (): ISendEmailRequestAction => ({\r\n    type: SEND_EMAIL_REQUEST\r\n})\r\nexport const sendEmailSuccess = (email: TMessageResetEmail): ISendEmailSuccessAction => ({\r\n    type: SEND_EMAIL_SUCCESS,\r\n    payload: email\r\n})\r\nexport const sendEmailFailed = (): ISendEmailFailedAction => ({\r\n    type: SEND_EMAIL_FAILED\r\n})\r\nexport const resetPasswordRequest = (): IResetPasswordRequestAction => ({\r\n    type: RESET_PASSWORD_REQUEST\r\n})\r\nexport const resetPasswordSuccess = (password: TMessageResetPassword): IResetPasswordSuccessAction => ({\r\n    type: RESET_PASSWORD_SUCCESS,\r\n    payload: password\r\n})\r\nexport const resetPasswordFailed = (): IResetPasswordFailedAction => ({\r\n    type: RESET_PASSWORD_FAILED\r\n})\r\nexport const setEmailCode = (code: string): ISetEmailCodeAction => ({\r\n    type: SET_EMAILCODE,\r\n    payload: code\r\n})\r\nexport const resetEmailCode = (): IResetEmailCodeAction => ({\r\n    type: RESET_EMAILCODE\r\n})\r\n\r\n// export const sendEmailForResetPass: AppThunk = (email: string) => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(sendEmailRequest());\r\n//         fetch(`${_apiUrl}/password-reset`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8'\r\n//             },\r\n//             body: JSON.stringify({\r\n//               \"email\": email\r\n//             })\r\n//         }).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(sendEmailFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(sendEmailSuccess(response))\r\n//                 dispatch(resetEmail())\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export const  resetPassword: AppThunk = (newPassword: string, emailCode: string) => {\r\n//     return function(dispatch: AppDispatch) {\r\n//         dispatch(resetPasswordRequest())\r\n//         fetch(`${_apiUrl}/password-reset/reset`, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json;charset=utf-8'\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 \"password\": newPassword,\r\n//                 \"token\": emailCode\r\n//             })\r\n//         }).then(response => {\r\n//             if (response.ok) {\r\n//                 return response.json()\r\n//             } else {\r\n//                 dispatch(resetPasswordFailed())\r\n//             }\r\n//         }).then(response => {\r\n//             if (response.success) {\r\n//                 dispatch(resetPasswordSuccess(response))\r\n//                 dispatch(resetEmailCode())\r\n//                 dispatch(resetPasswordAction())\r\n//             }\r\n//         }).catch(err => {\r\n//             console.log(err);\r\n//         })\r\n//     }\r\n// }","import { call, takeEvery, put, select } from 'redux-saga/effects';\r\nimport { SagaIterator } from \"@redux-saga/types\";\r\n\r\nimport { checkResponse } from '../../utils/apiHelper';\r\nimport { resetEmailCode, resetPasswordFailed, resetPasswordSuccess, sendEmailFailed, sendEmailSuccess } from '../actions/reset-password/reset-password';\r\nimport { resetEmail, resetPassword } from '../actions/user/user';\r\n\r\nimport { _apiUrl } from '../constants';\r\nimport { RESET_PASSWORD_REQUEST, SEND_EMAIL_REQUEST } from '../constants/reset-password';\r\n\r\nconst sendEmailFetch = (email: string) => {\r\n    return fetch(`${_apiUrl}/password-reset`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n          email\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nconst resetUserPasswordFetch = (newPassword: string, emailCode: string) => {\r\n    return fetch(`${_apiUrl}/password-reset/reset`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify({\r\n            password: newPassword,\r\n            token: emailCode\r\n        })\r\n    }).then(checkResponse)\r\n}\r\n\r\nexport function* sendEmail(): SagaIterator {\r\n    try {\r\n        const email = yield select(store => store.user.email)\r\n        const response = yield call(sendEmailFetch, email);\r\n        \r\n        yield put(sendEmailSuccess(response))\r\n        yield put(resetEmail())\r\n    } catch(error) {\r\n        yield put(sendEmailFailed())\r\n    }\r\n}\r\n\r\nexport function* resetUserPassword(): SagaIterator {\r\n    try {\r\n        const { emailCode, password } = yield select(store => ({\r\n            password: store.user.password,\r\n            emailCode: store.resetPassword.emailCode\r\n        }))\r\n\r\n        const response = yield call(resetUserPasswordFetch, password, emailCode);\r\n        \r\n        yield put(resetPasswordSuccess(response))\r\n        yield put(resetEmailCode())\r\n        yield put(resetPassword())\r\n    } catch(error) {\r\n        yield put(resetPasswordFailed())\r\n    }\r\n}\r\n\r\nexport default function* resetPasswordSaga() {\r\n    yield takeEvery(RESET_PASSWORD_REQUEST, resetUserPassword)\r\n    yield takeEvery(SEND_EMAIL_REQUEST, sendEmail)\r\n}","import { all, spawn } from \"redux-saga/effects\";\r\nimport ingredientsSaga from \"./ingredients\";\r\nimport orderSaga from \"./order\";\r\nimport resetPasswordSaga from \"./reset-password\";\r\nimport userSaga from \"./user\";\r\n\r\nexport function* rootSaga() {\r\n    const sagas = [ingredientsSaga, userSaga, resetPasswordSaga, orderSaga];\r\n\r\n    yield all(sagas.map(saga => spawn(saga)));\r\n}","import { applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport { createStore } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport { createSocketMiddlware } from './middleware/socketMiddleware';\r\nimport { wsAllOrdersActions, wsUserOrdersActions } from './reducers';\r\nimport { rootSaga } from './sagas'\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n  \r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const enhancer = composeEnhancers(applyMiddleware(\r\n    thunk,\r\n    sagaMiddleware,\r\n    createSocketMiddlware(null, wsAllOrdersActions),\r\n    createSocketMiddlware('token', wsUserOrdersActions)\r\n));\r\n\r\nexport const store = createStore(rootReducer, enhancer);\r\n\r\nsagaMiddleware.run(rootSaga)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/app';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './services/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ingredient\":\"burger-ingredients-item_ingredient__1LaZE\",\"ingredient_counter\":\"burger-ingredients-item_ingredient_counter__14gGL\",\"ingredient_img\":\"burger-ingredients-item_ingredient_img__1z1dM\",\"ingredient_price_wrapper\":\"burger-ingredients-item_ingredient_price_wrapper__265cz\",\"ingredient_name\":\"burger-ingredients-item_ingredient_name__29_CH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section_container\":\"burger-ingredients_section_container__1oTn8\",\"tab_wrapper\":\"burger-ingredients_tab_wrapper__2lQT1\",\"ingredients_wrapper\":\"burger-ingredients_ingredients_wrapper__1kCF3\",\"ingredients_items_wrapper\":\"burger-ingredients_ingredients_items_wrapper__1CLRc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section_container\":\"burger-constructor_section_container__lcMgw\",\"drop\":\"burger-constructor_drop__s8D0K\",\"wrapper_inner\":\"burger-constructor_wrapper_inner__1vaQ6\",\"constructor_footer\":\"burger-constructor_constructor_footer__3kmy-\",\"total_wrapper\":\"burger-constructor_total_wrapper__cSjtN\",\"no_ingredients\":\"burger-constructor_no_ingredients__2h0F5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"constructor_item\":\"burger-constructor-item_constructor_item__2bo2d\",\"active\":\"burger-constructor-item_active__wqT_0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ingredients_type_wrapper\":\"burger-ingredients-list_ingredients_type_wrapper__3wuJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__29N7Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_wrapper\":\"constructor-page_table_wrapper__1upOA\"};"],"sourceRoot":""}